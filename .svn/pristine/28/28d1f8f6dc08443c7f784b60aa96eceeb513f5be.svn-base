/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class BusinessServer {
  public interface Iface {
    int UpLoadCapFace(FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFace(AsyncCallback callback, object state, FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image);
    int End_UpLoadCapFace(IAsyncResult asyncResult);
    #endif
    int UpLoadCapFace1(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFace1(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    int End_UpLoadCapFace1(IAsyncResult asyncResult);
    #endif
    int OpenChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_OpenChannel(AsyncCallback callback, object state, string channelID);
    int End_OpenChannel(IAsyncResult asyncResult);
    #endif
    int CloseChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_CloseChannel(AsyncCallback callback, object state, string channelID);
    int End_CloseChannel(IAsyncResult asyncResult);
    #endif
    List<string> OpenAllChannel(string div_index);
    #if SILVERLIGHT
    IAsyncResult Begin_OpenAllChannel(AsyncCallback callback, object state, string div_index);
    List<string> End_OpenAllChannel(IAsyncResult asyncResult);
    #endif
    List<string> CloseAllChannel(string div_index);
    #if SILVERLIGHT
    IAsyncResult Begin_CloseAllChannel(AsyncCallback callback, object state, string div_index);
    List<string> End_CloseAllChannel(IAsyncResult asyncResult);
    #endif
    int AddChannel(ChannelCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg);
    int End_AddChannel(IAsyncResult asyncResult);
    #endif
    int DelChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_DelChannel(AsyncCallback callback, object state, string channelID);
    int End_DelChannel(IAsyncResult asyncResult);
    #endif
    int ModifyChannel(ChannelCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg);
    int End_ModifyChannel(IAsyncResult asyncResult);
    #endif
    List<ChannelCfg> QueryAllChannel(string div_index);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryAllChannel(AsyncCallback callback, object state, string div_index);
    List<ChannelCfg> End_QueryAllChannel(IAsyncResult asyncResult);
    #endif
    ChannelCfg QueryChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryChannel(AsyncCallback callback, object state, string channelID);
    ChannelCfg End_QueryChannel(IAsyncResult asyncResult);
    #endif
    List<CapObjImg> QueryCapDetails(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapDetails(AsyncCallback callback, object state, string id);
    List<CapObjImg> End_QueryCapDetails(IAsyncResult asyncResult);
    #endif
    List<CapFaceLog> QueryCapLog(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLog(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    List<CapFaceLog> End_QueryCapLog(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCapLogImage(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogImage(AsyncCallback callback, object state, string ID);
    List<byte[]> End_QueryCapLogImage(IAsyncResult asyncResult);
    #endif
    int QueryCapRecordTotalCount(string channel, long btime, long etime, string div_index, string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapRecordTotalCount(AsyncCallback callback, object state, string channel, long btime, long etime, string div_index, string uid);
    int End_QueryCapRecordTotalCount(IAsyncResult asyncResult);
    #endif
    List<CapFaceLogWithImg> QueryCapLogWithImg(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogWithImg(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    List<CapFaceLogWithImg> End_QueryCapLogWithImg(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLog> QueryCmpLog(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLog(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    List<CmpFaceLog> End_QueryCmpLog(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCmpLogImage(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogImage(AsyncCallback callback, object state, string ID);
    List<byte[]> End_QueryCmpLogImage(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImg> QueryCmpLogWidthImg(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogWidthImg(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid);
    List<CmpFaceLogWidthImg> End_QueryCmpLogWidthImg(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImg(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpByCapIdWidthImg(AsyncCallback callback, object state, string ID);
    List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImg(IAsyncResult asyncResult);
    #endif
    int QueryCmpRecordTotalCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string div_index, string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string div_index, string uid);
    int End_QueryCmpRecordTotalCount(IAsyncResult asyncResult);
    #endif
    List<CompareImgResult> CompareImg(byte[] image, int nThreshold, int nMaxCount);
    #if SILVERLIGHT
    IAsyncResult Begin_CompareImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount);
    List<CompareImgResult> End_CompareImg(IAsyncResult asyncResult);
    #endif
    List<FaceObj> QueryFaceObj(string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryFaceObj(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<FaceObj> End_QueryFaceObj(IAsyncResult asyncResult);
    #endif
    List<FaceObj> QueryFaceObjByImg(byte[] image, int nThreshold, int nMaxCount);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryFaceObjByImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount);
    List<FaceObj> End_QueryFaceObjByImg(IAsyncResult asyncResult);
    #endif
    int QueryFaceObjTotalCount(string id, string name, int bage, int eage, int gender, int type, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryFaceObjTotalCount(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime);
    int End_QueryFaceObjTotalCount(IAsyncResult asyncResult);
    #endif
    List<ErrorInfo> AddFaceObj(FaceObj obj);
    #if SILVERLIGHT
    IAsyncResult Begin_AddFaceObj(AsyncCallback callback, object state, FaceObj obj);
    List<ErrorInfo> End_AddFaceObj(IAsyncResult asyncResult);
    #endif
    int DelFaceObj(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_DelFaceObj(AsyncCallback callback, object state, string ID);
    int End_DelFaceObj(IAsyncResult asyncResult);
    #endif
    List<ErrorInfo> ModifyFaceObj(string id, FaceObj obj);
    #if SILVERLIGHT
    IAsyncResult Begin_ModifyFaceObj(AsyncCallback callback, object state, string id, FaceObj obj);
    List<ErrorInfo> End_ModifyFaceObj(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefGender();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefGender(AsyncCallback callback, object state);
    List<string> End_QueryDefGender(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefFaceObjType();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefFaceObjType(AsyncCallback callback, object state);
    List<string> End_QueryDefFaceObjType(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefChannelType();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefChannelType(AsyncCallback callback, object state);
    List<string> End_QueryDefChannelType(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefCameraType();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefCameraType(AsyncCallback callback, object state);
    List<string> End_QueryDefCameraType(IAsyncResult asyncResult);
    #endif
    int AddZone(ZoneCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddZone(AsyncCallback callback, object state, ZoneCfg cfg);
    int End_AddZone(IAsyncResult asyncResult);
    #endif
    int DelZone(string div_index);
    #if SILVERLIGHT
    IAsyncResult Begin_DelZone(AsyncCallback callback, object state, string div_index);
    int End_DelZone(IAsyncResult asyncResult);
    #endif
    int ModZone(ZoneCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModZone(AsyncCallback callback, object state, ZoneCfg cfg);
    int End_ModZone(IAsyncResult asyncResult);
    #endif
    ZoneCfg QueryZone(string div_index);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryZone(AsyncCallback callback, object state, string div_index);
    ZoneCfg End_QueryZone(IAsyncResult asyncResult);
    #endif
    int QueryListZoneNum(string div_name, string div_parent, string div_order);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListZoneNum(AsyncCallback callback, object state, string div_name, string div_parent, string div_order);
    int End_QueryListZoneNum(IAsyncResult asyncResult);
    #endif
    List<ZoneCfg> QueryListZone(string div_name, string div_parent, string div_order, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListZone(AsyncCallback callback, object state, string div_name, string div_parent, string div_order, int nPageFirstNum, int nPageNum);
    List<ZoneCfg> End_QueryListZone(IAsyncResult asyncResult);
    #endif
    int AddUser(UserCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddUser(AsyncCallback callback, object state, UserCfg cfg);
    int End_AddUser(IAsyncResult asyncResult);
    #endif
    int DelUser(string uid, string loginuid);
    #if SILVERLIGHT
    IAsyncResult Begin_DelUser(AsyncCallback callback, object state, string uid, string loginuid);
    int End_DelUser(IAsyncResult asyncResult);
    #endif
    int ModUser(UserCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModUser(AsyncCallback callback, object state, UserCfg cfg);
    int End_ModUser(IAsyncResult asyncResult);
    #endif
    UserCfg QueryUser(string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryUser(AsyncCallback callback, object state, string uid);
    UserCfg End_QueryUser(IAsyncResult asyncResult);
    #endif
    int QueryListUserNum(string uname, string utype, string div_index);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListUserNum(AsyncCallback callback, object state, string uname, string utype, string div_index);
    int End_QueryListUserNum(IAsyncResult asyncResult);
    #endif
    List<UserCfg> QueryListUser(string uname, string utype, string div_index, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListUser(AsyncCallback callback, object state, string uname, string utype, string div_index, int nPageFirstNum, int nPageNum);
    List<UserCfg> End_QueryListUser(IAsyncResult asyncResult);
    #endif
    int RecoveryPermission(string uid, List<ResourceCfg> cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_RecoveryPermission(AsyncCallback callback, object state, string uid, List<ResourceCfg> cfg);
    int End_RecoveryPermission(IAsyncResult asyncResult);
    #endif
    List<ResourceCfg> QueryListRecoPermis(string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListRecoPermis(AsyncCallback callback, object state, string uid);
    List<ResourceCfg> End_QueryListRecoPermis(IAsyncResult asyncResult);
    #endif
    UserCfg UserLogin(string uid, string upwd, string wid);
    #if SILVERLIGHT
    IAsyncResult Begin_UserLogin(AsyncCallback callback, object state, string uid, string upwd, string wid);
    UserCfg End_UserLogin(IAsyncResult asyncResult);
    #endif
    int UserLoginOff(string uid, string div_index);
    #if SILVERLIGHT
    IAsyncResult Begin_UserLoginOff(AsyncCallback callback, object state, string uid, string div_index);
    int End_UserLoginOff(IAsyncResult asyncResult);
    #endif
    int AddTmpGroup(TmpGroupCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddTmpGroup(AsyncCallback callback, object state, TmpGroupCfg cfg);
    int End_AddTmpGroup(IAsyncResult asyncResult);
    #endif
    int DelTmpGroup(string tmpgid);
    #if SILVERLIGHT
    IAsyncResult Begin_DelTmpGroup(AsyncCallback callback, object state, string tmpgid);
    int End_DelTmpGroup(IAsyncResult asyncResult);
    #endif
    int ModTmpGroup(TmpGroupCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModTmpGroup(AsyncCallback callback, object state, TmpGroupCfg cfg);
    int End_ModTmpGroup(IAsyncResult asyncResult);
    #endif
    TmpGroupCfg QueryTmpGroup(string tmpgid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryTmpGroup(AsyncCallback callback, object state, string tmpgid);
    TmpGroupCfg End_QueryTmpGroup(IAsyncResult asyncResult);
    #endif
    int QueryListTmpGroupNum(string uid, string tmpgname, string rtype, string resid, string pid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListTmpGroupNum(AsyncCallback callback, object state, string uid, string tmpgname, string rtype, string resid, string pid);
    int End_QueryListTmpGroupNum(IAsyncResult asyncResult);
    #endif
    List<TmpGroupCfg> QueryListTmpGroup(string uid, string tmpgname, string rtype, string resid, string pid, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListTmpGroup(AsyncCallback callback, object state, string uid, string tmpgname, string rtype, string resid, string pid, int nPageFirstNum, int nPageNum);
    List<TmpGroupCfg> End_QueryListTmpGroup(IAsyncResult asyncResult);
    #endif
    int HearBeat(string div_index, string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_HearBeat(AsyncCallback callback, object state, string div_index, string uid);
    int End_HearBeat(IAsyncResult asyncResult);
    #endif
    int GrantAuth(string uid, List<AuthCfg> cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_GrantAuth(AsyncCallback callback, object state, string uid, List<AuthCfg> cfg);
    int End_GrantAuth(IAsyncResult asyncResult);
    #endif
    int RevokeAuth(string uid, List<AuthCfg> cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_RevokeAuth(AsyncCallback callback, object state, string uid, List<AuthCfg> cfg);
    int End_RevokeAuth(IAsyncResult asyncResult);
    #endif
    List<AuthCfg> QueryListAuth(string uid);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListAuth(AsyncCallback callback, object state, string uid);
    List<AuthCfg> End_QueryListAuth(IAsyncResult asyncResult);
    #endif
    string ClientRegion(ClientCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ClientRegion(AsyncCallback callback, object state, ClientCfg cfg);
    string End_ClientRegion(IAsyncResult asyncResult);
    #endif
    CResultCfg VisitorRegion(VisitorInfo cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_VisitorRegion(AsyncCallback callback, object state, VisitorInfo cfg);
    CResultCfg End_VisitorRegion(IAsyncResult asyncResult);
    #endif
    ErrorInfo UploadCmpLogFromFront(CmpFaceLogInfo cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_UploadCmpLogFromFront(AsyncCallback callback, object state, CmpFaceLogInfo cfg);
    ErrorInfo End_UploadCmpLogFromFront(IAsyncResult asyncResult);
    #endif
    List<CResultCfg> VisitorVerifi(List<string> img, string channelID, string channelname);
    #if SILVERLIGHT
    IAsyncResult Begin_VisitorVerifi(AsyncCallback callback, object state, List<string> img, string channelID, string channelname);
    List<CResultCfg> End_VisitorVerifi(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFace(AsyncCallback callback, object state, FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    {
      return send_UpLoadCapFace(callback, state, fi, nFeaLen, Feature, nImgLen, Image);
    }

    public int End_UpLoadCapFace(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFace();
    }

    #endif

    public int UpLoadCapFace(FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFace(fi, nFeaLen, Feature, nImgLen, Image);
      return recv_UpLoadCapFace();

      #else
      var asyncResult = Begin_UpLoadCapFace(null, null, fi, nFeaLen, Feature, nImgLen, Image);
      return End_UpLoadCapFace(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFace(AsyncCallback callback, object state, FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    #else
    public void send_UpLoadCapFace(FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFace", TMessageType.Call, seqid_));
      UpLoadCapFace_args args = new UpLoadCapFace_args();
      args.Fi = fi;
      args.NFeaLen = nFeaLen;
      args.Feature = Feature;
      args.NImgLen = nImgLen;
      args.Image = Image;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpLoadCapFace()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFace_result result = new UpLoadCapFace_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFace failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFace1(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      return send_UpLoadCapFace1(callback, state, ChannelID, index, timeIn, timeOut, age, gender, fis);
    }

    public int End_UpLoadCapFace1(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFace1();
    }

    #endif

    public int UpLoadCapFace1(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFace1(ChannelID, index, timeIn, timeOut, age, gender, fis);
      return recv_UpLoadCapFace1();

      #else
      var asyncResult = Begin_UpLoadCapFace1(null, null, ChannelID, index, timeIn, timeOut, age, gender, fis);
      return End_UpLoadCapFace1(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFace1(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #else
    public void send_UpLoadCapFace1(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFace1", TMessageType.Call, seqid_));
      UpLoadCapFace1_args args = new UpLoadCapFace1_args();
      args.ChannelID = ChannelID;
      args.Index = index;
      args.TimeIn = timeIn;
      args.TimeOut = timeOut;
      args.Age = age;
      args.Gender = gender;
      args.Fis = fis;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpLoadCapFace1()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFace1_result result = new UpLoadCapFace1_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFace1 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_OpenChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_OpenChannel(callback, state, channelID);
    }

    public int End_OpenChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_OpenChannel();
    }

    #endif

    public int OpenChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_OpenChannel(channelID);
      return recv_OpenChannel();

      #else
      var asyncResult = Begin_OpenChannel(null, null, channelID);
      return End_OpenChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_OpenChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_OpenChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("OpenChannel", TMessageType.Call, seqid_));
      OpenChannel_args args = new OpenChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_OpenChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      OpenChannel_result result = new OpenChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CloseChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_CloseChannel(callback, state, channelID);
    }

    public int End_CloseChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CloseChannel();
    }

    #endif

    public int CloseChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_CloseChannel(channelID);
      return recv_CloseChannel();

      #else
      var asyncResult = Begin_CloseChannel(null, null, channelID);
      return End_CloseChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CloseChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_CloseChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CloseChannel", TMessageType.Call, seqid_));
      CloseChannel_args args = new CloseChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_CloseChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CloseChannel_result result = new CloseChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_OpenAllChannel(AsyncCallback callback, object state, string div_index)
    {
      return send_OpenAllChannel(callback, state, div_index);
    }

    public List<string> End_OpenAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_OpenAllChannel();
    }

    #endif

    public List<string> OpenAllChannel(string div_index)
    {
      #if !SILVERLIGHT
      send_OpenAllChannel(div_index);
      return recv_OpenAllChannel();

      #else
      var asyncResult = Begin_OpenAllChannel(null, null, div_index);
      return End_OpenAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_OpenAllChannel(AsyncCallback callback, object state, string div_index)
    #else
    public void send_OpenAllChannel(string div_index)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("OpenAllChannel", TMessageType.Call, seqid_));
      OpenAllChannel_args args = new OpenAllChannel_args();
      args.Div_index = div_index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_OpenAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      OpenAllChannel_result result = new OpenAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CloseAllChannel(AsyncCallback callback, object state, string div_index)
    {
      return send_CloseAllChannel(callback, state, div_index);
    }

    public List<string> End_CloseAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CloseAllChannel();
    }

    #endif

    public List<string> CloseAllChannel(string div_index)
    {
      #if !SILVERLIGHT
      send_CloseAllChannel(div_index);
      return recv_CloseAllChannel();

      #else
      var asyncResult = Begin_CloseAllChannel(null, null, div_index);
      return End_CloseAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CloseAllChannel(AsyncCallback callback, object state, string div_index)
    #else
    public void send_CloseAllChannel(string div_index)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CloseAllChannel", TMessageType.Call, seqid_));
      CloseAllChannel_args args = new CloseAllChannel_args();
      args.Div_index = div_index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_CloseAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CloseAllChannel_result result = new CloseAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    {
      return send_AddChannel(callback, state, cfg);
    }

    public int End_AddChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddChannel();
    }

    #endif

    public int AddChannel(ChannelCfg cfg)
    {
      #if !SILVERLIGHT
      send_AddChannel(cfg);
      return recv_AddChannel();

      #else
      var asyncResult = Begin_AddChannel(null, null, cfg);
      return End_AddChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    #else
    public void send_AddChannel(ChannelCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddChannel", TMessageType.Call, seqid_));
      AddChannel_args args = new AddChannel_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddChannel_result result = new AddChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_DelChannel(callback, state, channelID);
    }

    public int End_DelChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelChannel();
    }

    #endif

    public int DelChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_DelChannel(channelID);
      return recv_DelChannel();

      #else
      var asyncResult = Begin_DelChannel(null, null, channelID);
      return End_DelChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_DelChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelChannel", TMessageType.Call, seqid_));
      DelChannel_args args = new DelChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelChannel_result result = new DelChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    {
      return send_ModifyChannel(callback, state, cfg);
    }

    public int End_ModifyChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModifyChannel();
    }

    #endif

    public int ModifyChannel(ChannelCfg cfg)
    {
      #if !SILVERLIGHT
      send_ModifyChannel(cfg);
      return recv_ModifyChannel();

      #else
      var asyncResult = Begin_ModifyChannel(null, null, cfg);
      return End_ModifyChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    #else
    public void send_ModifyChannel(ChannelCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModifyChannel", TMessageType.Call, seqid_));
      ModifyChannel_args args = new ModifyChannel_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModifyChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModifyChannel_result result = new ModifyChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModifyChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryAllChannel(AsyncCallback callback, object state, string div_index)
    {
      return send_QueryAllChannel(callback, state, div_index);
    }

    public List<ChannelCfg> End_QueryAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryAllChannel();
    }

    #endif

    public List<ChannelCfg> QueryAllChannel(string div_index)
    {
      #if !SILVERLIGHT
      send_QueryAllChannel(div_index);
      return recv_QueryAllChannel();

      #else
      var asyncResult = Begin_QueryAllChannel(null, null, div_index);
      return End_QueryAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryAllChannel(AsyncCallback callback, object state, string div_index)
    #else
    public void send_QueryAllChannel(string div_index)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryAllChannel", TMessageType.Call, seqid_));
      QueryAllChannel_args args = new QueryAllChannel_args();
      args.Div_index = div_index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelCfg> recv_QueryAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryAllChannel_result result = new QueryAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_QueryChannel(callback, state, channelID);
    }

    public ChannelCfg End_QueryChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryChannel();
    }

    #endif

    public ChannelCfg QueryChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_QueryChannel(channelID);
      return recv_QueryChannel();

      #else
      var asyncResult = Begin_QueryChannel(null, null, channelID);
      return End_QueryChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_QueryChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryChannel", TMessageType.Call, seqid_));
      QueryChannel_args args = new QueryChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelCfg recv_QueryChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryChannel_result result = new QueryChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapDetails(AsyncCallback callback, object state, string id)
    {
      return send_QueryCapDetails(callback, state, id);
    }

    public List<CapObjImg> End_QueryCapDetails(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapDetails();
    }

    #endif

    public List<CapObjImg> QueryCapDetails(string id)
    {
      #if !SILVERLIGHT
      send_QueryCapDetails(id);
      return recv_QueryCapDetails();

      #else
      var asyncResult = Begin_QueryCapDetails(null, null, id);
      return End_QueryCapDetails(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapDetails(AsyncCallback callback, object state, string id)
    #else
    public void send_QueryCapDetails(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapDetails", TMessageType.Call, seqid_));
      QueryCapDetails_args args = new QueryCapDetails_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapObjImg> recv_QueryCapDetails()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapDetails_result result = new QueryCapDetails_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapDetails failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLog(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      return send_QueryCapLog(callback, state, channel, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
    }

    public List<CapFaceLog> End_QueryCapLog(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLog();
    }

    #endif

    public List<CapFaceLog> QueryCapLog(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      #if !SILVERLIGHT
      send_QueryCapLog(channel, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return recv_QueryCapLog();

      #else
      var asyncResult = Begin_QueryCapLog(null, null, channel, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return End_QueryCapLog(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLog(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #else
    public void send_QueryCapLog(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLog", TMessageType.Call, seqid_));
      QueryCapLog_args args = new QueryCapLog_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Div_index = div_index;
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLog> recv_QueryCapLog()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLog_result result = new QueryCapLog_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLog failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogImage(AsyncCallback callback, object state, string ID)
    {
      return send_QueryCapLogImage(callback, state, ID);
    }

    public List<byte[]> End_QueryCapLogImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogImage();
    }

    #endif

    public List<byte[]> QueryCapLogImage(string ID)
    {
      #if !SILVERLIGHT
      send_QueryCapLogImage(ID);
      return recv_QueryCapLogImage();

      #else
      var asyncResult = Begin_QueryCapLogImage(null, null, ID);
      return End_QueryCapLogImage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogImage(AsyncCallback callback, object state, string ID)
    #else
    public void send_QueryCapLogImage(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogImage", TMessageType.Call, seqid_));
      QueryCapLogImage_args args = new QueryCapLogImage_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCapLogImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogImage_result result = new QueryCapLogImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogImage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapRecordTotalCount(AsyncCallback callback, object state, string channel, long btime, long etime, string div_index, string uid)
    {
      return send_QueryCapRecordTotalCount(callback, state, channel, btime, etime, div_index, uid);
    }

    public int End_QueryCapRecordTotalCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapRecordTotalCount();
    }

    #endif

    public int QueryCapRecordTotalCount(string channel, long btime, long etime, string div_index, string uid)
    {
      #if !SILVERLIGHT
      send_QueryCapRecordTotalCount(channel, btime, etime, div_index, uid);
      return recv_QueryCapRecordTotalCount();

      #else
      var asyncResult = Begin_QueryCapRecordTotalCount(null, null, channel, btime, etime, div_index, uid);
      return End_QueryCapRecordTotalCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapRecordTotalCount(AsyncCallback callback, object state, string channel, long btime, long etime, string div_index, string uid)
    #else
    public void send_QueryCapRecordTotalCount(string channel, long btime, long etime, string div_index, string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapRecordTotalCount", TMessageType.Call, seqid_));
      QueryCapRecordTotalCount_args args = new QueryCapRecordTotalCount_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.Div_index = div_index;
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryCapRecordTotalCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapRecordTotalCount_result result = new QueryCapRecordTotalCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapRecordTotalCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogWithImg(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      return send_QueryCapLogWithImg(callback, state, channel, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
    }

    public List<CapFaceLogWithImg> End_QueryCapLogWithImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogWithImg();
    }

    #endif

    public List<CapFaceLogWithImg> QueryCapLogWithImg(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      #if !SILVERLIGHT
      send_QueryCapLogWithImg(channel, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return recv_QueryCapLogWithImg();

      #else
      var asyncResult = Begin_QueryCapLogWithImg(null, null, channel, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return End_QueryCapLogWithImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogWithImg(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #else
    public void send_QueryCapLogWithImg(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogWithImg", TMessageType.Call, seqid_));
      QueryCapLogWithImg_args args = new QueryCapLogWithImg_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Div_index = div_index;
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLogWithImg> recv_QueryCapLogWithImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogWithImg_result result = new QueryCapLogWithImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogWithImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLog(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      return send_QueryCmpLog(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
    }

    public List<CmpFaceLog> End_QueryCmpLog(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLog();
    }

    #endif

    public List<CmpFaceLog> QueryCmpLog(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      #if !SILVERLIGHT
      send_QueryCmpLog(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return recv_QueryCmpLog();

      #else
      var asyncResult = Begin_QueryCmpLog(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return End_QueryCmpLog(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLog(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #else
    public void send_QueryCmpLog(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLog", TMessageType.Call, seqid_));
      QueryCmpLog_args args = new QueryCmpLog_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Div_index = div_index;
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLog> recv_QueryCmpLog()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLog_result result = new QueryCmpLog_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLog failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogImage(AsyncCallback callback, object state, string ID)
    {
      return send_QueryCmpLogImage(callback, state, ID);
    }

    public List<byte[]> End_QueryCmpLogImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogImage();
    }

    #endif

    public List<byte[]> QueryCmpLogImage(string ID)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogImage(ID);
      return recv_QueryCmpLogImage();

      #else
      var asyncResult = Begin_QueryCmpLogImage(null, null, ID);
      return End_QueryCmpLogImage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogImage(AsyncCallback callback, object state, string ID)
    #else
    public void send_QueryCmpLogImage(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogImage", TMessageType.Call, seqid_));
      QueryCmpLogImage_args args = new QueryCmpLogImage_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCmpLogImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogImage_result result = new QueryCmpLogImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogImage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogWidthImg(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      return send_QueryCmpLogWidthImg(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
    }

    public List<CmpFaceLogWidthImg> End_QueryCmpLogWidthImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogWidthImg();
    }

    #endif

    public List<CmpFaceLogWidthImg> QueryCmpLogWidthImg(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogWidthImg(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return recv_QueryCmpLogWidthImg();

      #else
      var asyncResult = Begin_QueryCmpLogWidthImg(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, div_index, uid);
      return End_QueryCmpLogWidthImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogWidthImg(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #else
    public void send_QueryCmpLogWidthImg(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, string div_index, string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogWidthImg", TMessageType.Call, seqid_));
      QueryCmpLogWidthImg_args args = new QueryCmpLogWidthImg_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Div_index = div_index;
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImg> recv_QueryCmpLogWidthImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogWidthImg_result result = new QueryCmpLogWidthImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogWidthImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpByCapIdWidthImg(AsyncCallback callback, object state, string ID)
    {
      return send_QueryCmpByCapIdWidthImg(callback, state, ID);
    }

    public List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpByCapIdWidthImg();
    }

    #endif

    public List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImg(string ID)
    {
      #if !SILVERLIGHT
      send_QueryCmpByCapIdWidthImg(ID);
      return recv_QueryCmpByCapIdWidthImg();

      #else
      var asyncResult = Begin_QueryCmpByCapIdWidthImg(null, null, ID);
      return End_QueryCmpByCapIdWidthImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpByCapIdWidthImg(AsyncCallback callback, object state, string ID)
    #else
    public void send_QueryCmpByCapIdWidthImg(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImg", TMessageType.Call, seqid_));
      QueryCmpByCapIdWidthImg_args args = new QueryCmpByCapIdWidthImg_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImg> recv_QueryCmpByCapIdWidthImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpByCapIdWidthImg_result result = new QueryCmpByCapIdWidthImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpByCapIdWidthImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string div_index, string uid)
    {
      return send_QueryCmpRecordTotalCount(callback, state, channel, name, type, gender, bage, eage, btime, etime, div_index, uid);
    }

    public int End_QueryCmpRecordTotalCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCount();
    }

    #endif

    public int QueryCmpRecordTotalCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string div_index, string uid)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCount(channel, name, type, gender, bage, eage, btime, etime, div_index, uid);
      return recv_QueryCmpRecordTotalCount();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCount(null, null, channel, name, type, gender, bage, eage, btime, etime, div_index, uid);
      return End_QueryCmpRecordTotalCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string div_index, string uid)
    #else
    public void send_QueryCmpRecordTotalCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string div_index, string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCount", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCount_args args = new QueryCmpRecordTotalCount_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Div_index = div_index;
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryCmpRecordTotalCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCount_result result = new QueryCmpRecordTotalCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CompareImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    {
      return send_CompareImg(callback, state, image, nThreshold, nMaxCount);
    }

    public List<CompareImgResult> End_CompareImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CompareImg();
    }

    #endif

    public List<CompareImgResult> CompareImg(byte[] image, int nThreshold, int nMaxCount)
    {
      #if !SILVERLIGHT
      send_CompareImg(image, nThreshold, nMaxCount);
      return recv_CompareImg();

      #else
      var asyncResult = Begin_CompareImg(null, null, image, nThreshold, nMaxCount);
      return End_CompareImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CompareImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    #else
    public void send_CompareImg(byte[] image, int nThreshold, int nMaxCount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CompareImg", TMessageType.Call, seqid_));
      CompareImg_args args = new CompareImg_args();
      args.Image = image;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CompareImgResult> recv_CompareImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CompareImg_result result = new CompareImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CompareImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryFaceObj(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryFaceObj(callback, state, id, name, bage, eage, gender, type, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<FaceObj> End_QueryFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryFaceObj();
    }

    #endif

    public List<FaceObj> QueryFaceObj(string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryFaceObj(id, name, bage, eage, gender, type, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryFaceObj();

      #else
      var asyncResult = Begin_QueryFaceObj(null, null, id, name, bage, eage, gender, type, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryFaceObj(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryFaceObj(string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryFaceObj", TMessageType.Call, seqid_));
      QueryFaceObj_args args = new QueryFaceObj_args();
      args.Id = id;
      args.Name = name;
      args.Bage = bage;
      args.Eage = eage;
      args.Gender = gender;
      args.Type = type;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceObj> recv_QueryFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryFaceObj_result result = new QueryFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryFaceObjByImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    {
      return send_QueryFaceObjByImg(callback, state, image, nThreshold, nMaxCount);
    }

    public List<FaceObj> End_QueryFaceObjByImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryFaceObjByImg();
    }

    #endif

    public List<FaceObj> QueryFaceObjByImg(byte[] image, int nThreshold, int nMaxCount)
    {
      #if !SILVERLIGHT
      send_QueryFaceObjByImg(image, nThreshold, nMaxCount);
      return recv_QueryFaceObjByImg();

      #else
      var asyncResult = Begin_QueryFaceObjByImg(null, null, image, nThreshold, nMaxCount);
      return End_QueryFaceObjByImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryFaceObjByImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    #else
    public void send_QueryFaceObjByImg(byte[] image, int nThreshold, int nMaxCount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryFaceObjByImg", TMessageType.Call, seqid_));
      QueryFaceObjByImg_args args = new QueryFaceObjByImg_args();
      args.Image = image;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceObj> recv_QueryFaceObjByImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryFaceObjByImg_result result = new QueryFaceObjByImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryFaceObjByImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryFaceObjTotalCount(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    {
      return send_QueryFaceObjTotalCount(callback, state, id, name, bage, eage, gender, type, btime, etime);
    }

    public int End_QueryFaceObjTotalCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryFaceObjTotalCount();
    }

    #endif

    public int QueryFaceObjTotalCount(string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryFaceObjTotalCount(id, name, bage, eage, gender, type, btime, etime);
      return recv_QueryFaceObjTotalCount();

      #else
      var asyncResult = Begin_QueryFaceObjTotalCount(null, null, id, name, bage, eage, gender, type, btime, etime);
      return End_QueryFaceObjTotalCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryFaceObjTotalCount(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    #else
    public void send_QueryFaceObjTotalCount(string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryFaceObjTotalCount", TMessageType.Call, seqid_));
      QueryFaceObjTotalCount_args args = new QueryFaceObjTotalCount_args();
      args.Id = id;
      args.Name = name;
      args.Bage = bage;
      args.Eage = eage;
      args.Gender = gender;
      args.Type = type;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryFaceObjTotalCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryFaceObjTotalCount_result result = new QueryFaceObjTotalCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryFaceObjTotalCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddFaceObj(AsyncCallback callback, object state, FaceObj obj)
    {
      return send_AddFaceObj(callback, state, obj);
    }

    public List<ErrorInfo> End_AddFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddFaceObj();
    }

    #endif

    public List<ErrorInfo> AddFaceObj(FaceObj obj)
    {
      #if !SILVERLIGHT
      send_AddFaceObj(obj);
      return recv_AddFaceObj();

      #else
      var asyncResult = Begin_AddFaceObj(null, null, obj);
      return End_AddFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddFaceObj(AsyncCallback callback, object state, FaceObj obj)
    #else
    public void send_AddFaceObj(FaceObj obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddFaceObj", TMessageType.Call, seqid_));
      AddFaceObj_args args = new AddFaceObj_args();
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ErrorInfo> recv_AddFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddFaceObj_result result = new AddFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelFaceObj(AsyncCallback callback, object state, string ID)
    {
      return send_DelFaceObj(callback, state, ID);
    }

    public int End_DelFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelFaceObj();
    }

    #endif

    public int DelFaceObj(string ID)
    {
      #if !SILVERLIGHT
      send_DelFaceObj(ID);
      return recv_DelFaceObj();

      #else
      var asyncResult = Begin_DelFaceObj(null, null, ID);
      return End_DelFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelFaceObj(AsyncCallback callback, object state, string ID)
    #else
    public void send_DelFaceObj(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelFaceObj", TMessageType.Call, seqid_));
      DelFaceObj_args args = new DelFaceObj_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelFaceObj_result result = new DelFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModifyFaceObj(AsyncCallback callback, object state, string id, FaceObj obj)
    {
      return send_ModifyFaceObj(callback, state, id, obj);
    }

    public List<ErrorInfo> End_ModifyFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModifyFaceObj();
    }

    #endif

    public List<ErrorInfo> ModifyFaceObj(string id, FaceObj obj)
    {
      #if !SILVERLIGHT
      send_ModifyFaceObj(id, obj);
      return recv_ModifyFaceObj();

      #else
      var asyncResult = Begin_ModifyFaceObj(null, null, id, obj);
      return End_ModifyFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModifyFaceObj(AsyncCallback callback, object state, string id, FaceObj obj)
    #else
    public void send_ModifyFaceObj(string id, FaceObj obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModifyFaceObj", TMessageType.Call, seqid_));
      ModifyFaceObj_args args = new ModifyFaceObj_args();
      args.Id = id;
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ErrorInfo> recv_ModifyFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModifyFaceObj_result result = new ModifyFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModifyFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefGender(AsyncCallback callback, object state)
    {
      return send_QueryDefGender(callback, state);
    }

    public List<string> End_QueryDefGender(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefGender();
    }

    #endif

    public List<string> QueryDefGender()
    {
      #if !SILVERLIGHT
      send_QueryDefGender();
      return recv_QueryDefGender();

      #else
      var asyncResult = Begin_QueryDefGender(null, null);
      return End_QueryDefGender(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefGender(AsyncCallback callback, object state)
    #else
    public void send_QueryDefGender()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefGender", TMessageType.Call, seqid_));
      QueryDefGender_args args = new QueryDefGender_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefGender()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefGender_result result = new QueryDefGender_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefGender failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefFaceObjType(AsyncCallback callback, object state)
    {
      return send_QueryDefFaceObjType(callback, state);
    }

    public List<string> End_QueryDefFaceObjType(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefFaceObjType();
    }

    #endif

    public List<string> QueryDefFaceObjType()
    {
      #if !SILVERLIGHT
      send_QueryDefFaceObjType();
      return recv_QueryDefFaceObjType();

      #else
      var asyncResult = Begin_QueryDefFaceObjType(null, null);
      return End_QueryDefFaceObjType(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefFaceObjType(AsyncCallback callback, object state)
    #else
    public void send_QueryDefFaceObjType()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefFaceObjType", TMessageType.Call, seqid_));
      QueryDefFaceObjType_args args = new QueryDefFaceObjType_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefFaceObjType()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefFaceObjType_result result = new QueryDefFaceObjType_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefFaceObjType failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefChannelType(AsyncCallback callback, object state)
    {
      return send_QueryDefChannelType(callback, state);
    }

    public List<string> End_QueryDefChannelType(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefChannelType();
    }

    #endif

    public List<string> QueryDefChannelType()
    {
      #if !SILVERLIGHT
      send_QueryDefChannelType();
      return recv_QueryDefChannelType();

      #else
      var asyncResult = Begin_QueryDefChannelType(null, null);
      return End_QueryDefChannelType(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefChannelType(AsyncCallback callback, object state)
    #else
    public void send_QueryDefChannelType()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefChannelType", TMessageType.Call, seqid_));
      QueryDefChannelType_args args = new QueryDefChannelType_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefChannelType()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefChannelType_result result = new QueryDefChannelType_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefChannelType failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefCameraType(AsyncCallback callback, object state)
    {
      return send_QueryDefCameraType(callback, state);
    }

    public List<string> End_QueryDefCameraType(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefCameraType();
    }

    #endif

    public List<string> QueryDefCameraType()
    {
      #if !SILVERLIGHT
      send_QueryDefCameraType();
      return recv_QueryDefCameraType();

      #else
      var asyncResult = Begin_QueryDefCameraType(null, null);
      return End_QueryDefCameraType(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefCameraType(AsyncCallback callback, object state)
    #else
    public void send_QueryDefCameraType()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefCameraType", TMessageType.Call, seqid_));
      QueryDefCameraType_args args = new QueryDefCameraType_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefCameraType()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefCameraType_result result = new QueryDefCameraType_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefCameraType failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddZone(AsyncCallback callback, object state, ZoneCfg cfg)
    {
      return send_AddZone(callback, state, cfg);
    }

    public int End_AddZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddZone();
    }

    #endif

    public int AddZone(ZoneCfg cfg)
    {
      #if !SILVERLIGHT
      send_AddZone(cfg);
      return recv_AddZone();

      #else
      var asyncResult = Begin_AddZone(null, null, cfg);
      return End_AddZone(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddZone(AsyncCallback callback, object state, ZoneCfg cfg)
    #else
    public void send_AddZone(ZoneCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddZone", TMessageType.Call, seqid_));
      AddZone_args args = new AddZone_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddZone_result result = new AddZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelZone(AsyncCallback callback, object state, string div_index)
    {
      return send_DelZone(callback, state, div_index);
    }

    public int End_DelZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelZone();
    }

    #endif

    public int DelZone(string div_index)
    {
      #if !SILVERLIGHT
      send_DelZone(div_index);
      return recv_DelZone();

      #else
      var asyncResult = Begin_DelZone(null, null, div_index);
      return End_DelZone(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelZone(AsyncCallback callback, object state, string div_index)
    #else
    public void send_DelZone(string div_index)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelZone", TMessageType.Call, seqid_));
      DelZone_args args = new DelZone_args();
      args.Div_index = div_index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelZone_result result = new DelZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModZone(AsyncCallback callback, object state, ZoneCfg cfg)
    {
      return send_ModZone(callback, state, cfg);
    }

    public int End_ModZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModZone();
    }

    #endif

    public int ModZone(ZoneCfg cfg)
    {
      #if !SILVERLIGHT
      send_ModZone(cfg);
      return recv_ModZone();

      #else
      var asyncResult = Begin_ModZone(null, null, cfg);
      return End_ModZone(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModZone(AsyncCallback callback, object state, ZoneCfg cfg)
    #else
    public void send_ModZone(ZoneCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModZone", TMessageType.Call, seqid_));
      ModZone_args args = new ModZone_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModZone_result result = new ModZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryZone(AsyncCallback callback, object state, string div_index)
    {
      return send_QueryZone(callback, state, div_index);
    }

    public ZoneCfg End_QueryZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryZone();
    }

    #endif

    public ZoneCfg QueryZone(string div_index)
    {
      #if !SILVERLIGHT
      send_QueryZone(div_index);
      return recv_QueryZone();

      #else
      var asyncResult = Begin_QueryZone(null, null, div_index);
      return End_QueryZone(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryZone(AsyncCallback callback, object state, string div_index)
    #else
    public void send_QueryZone(string div_index)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryZone", TMessageType.Call, seqid_));
      QueryZone_args args = new QueryZone_args();
      args.Div_index = div_index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ZoneCfg recv_QueryZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryZone_result result = new QueryZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListZoneNum(AsyncCallback callback, object state, string div_name, string div_parent, string div_order)
    {
      return send_QueryListZoneNum(callback, state, div_name, div_parent, div_order);
    }

    public int End_QueryListZoneNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListZoneNum();
    }

    #endif

    public int QueryListZoneNum(string div_name, string div_parent, string div_order)
    {
      #if !SILVERLIGHT
      send_QueryListZoneNum(div_name, div_parent, div_order);
      return recv_QueryListZoneNum();

      #else
      var asyncResult = Begin_QueryListZoneNum(null, null, div_name, div_parent, div_order);
      return End_QueryListZoneNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListZoneNum(AsyncCallback callback, object state, string div_name, string div_parent, string div_order)
    #else
    public void send_QueryListZoneNum(string div_name, string div_parent, string div_order)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListZoneNum", TMessageType.Call, seqid_));
      QueryListZoneNum_args args = new QueryListZoneNum_args();
      args.Div_name = div_name;
      args.Div_parent = div_parent;
      args.Div_order = div_order;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryListZoneNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListZoneNum_result result = new QueryListZoneNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListZoneNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListZone(AsyncCallback callback, object state, string div_name, string div_parent, string div_order, int nPageFirstNum, int nPageNum)
    {
      return send_QueryListZone(callback, state, div_name, div_parent, div_order, nPageFirstNum, nPageNum);
    }

    public List<ZoneCfg> End_QueryListZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListZone();
    }

    #endif

    public List<ZoneCfg> QueryListZone(string div_name, string div_parent, string div_order, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryListZone(div_name, div_parent, div_order, nPageFirstNum, nPageNum);
      return recv_QueryListZone();

      #else
      var asyncResult = Begin_QueryListZone(null, null, div_name, div_parent, div_order, nPageFirstNum, nPageNum);
      return End_QueryListZone(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListZone(AsyncCallback callback, object state, string div_name, string div_parent, string div_order, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryListZone(string div_name, string div_parent, string div_order, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListZone", TMessageType.Call, seqid_));
      QueryListZone_args args = new QueryListZone_args();
      args.Div_name = div_name;
      args.Div_parent = div_parent;
      args.Div_order = div_order;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ZoneCfg> recv_QueryListZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListZone_result result = new QueryListZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddUser(AsyncCallback callback, object state, UserCfg cfg)
    {
      return send_AddUser(callback, state, cfg);
    }

    public int End_AddUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddUser();
    }

    #endif

    public int AddUser(UserCfg cfg)
    {
      #if !SILVERLIGHT
      send_AddUser(cfg);
      return recv_AddUser();

      #else
      var asyncResult = Begin_AddUser(null, null, cfg);
      return End_AddUser(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddUser(AsyncCallback callback, object state, UserCfg cfg)
    #else
    public void send_AddUser(UserCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddUser", TMessageType.Call, seqid_));
      AddUser_args args = new AddUser_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddUser_result result = new AddUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelUser(AsyncCallback callback, object state, string uid, string loginuid)
    {
      return send_DelUser(callback, state, uid, loginuid);
    }

    public int End_DelUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelUser();
    }

    #endif

    public int DelUser(string uid, string loginuid)
    {
      #if !SILVERLIGHT
      send_DelUser(uid, loginuid);
      return recv_DelUser();

      #else
      var asyncResult = Begin_DelUser(null, null, uid, loginuid);
      return End_DelUser(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelUser(AsyncCallback callback, object state, string uid, string loginuid)
    #else
    public void send_DelUser(string uid, string loginuid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelUser", TMessageType.Call, seqid_));
      DelUser_args args = new DelUser_args();
      args.Uid = uid;
      args.Loginuid = loginuid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelUser_result result = new DelUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModUser(AsyncCallback callback, object state, UserCfg cfg)
    {
      return send_ModUser(callback, state, cfg);
    }

    public int End_ModUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModUser();
    }

    #endif

    public int ModUser(UserCfg cfg)
    {
      #if !SILVERLIGHT
      send_ModUser(cfg);
      return recv_ModUser();

      #else
      var asyncResult = Begin_ModUser(null, null, cfg);
      return End_ModUser(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModUser(AsyncCallback callback, object state, UserCfg cfg)
    #else
    public void send_ModUser(UserCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModUser", TMessageType.Call, seqid_));
      ModUser_args args = new ModUser_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModUser_result result = new ModUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryUser(AsyncCallback callback, object state, string uid)
    {
      return send_QueryUser(callback, state, uid);
    }

    public UserCfg End_QueryUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryUser();
    }

    #endif

    public UserCfg QueryUser(string uid)
    {
      #if !SILVERLIGHT
      send_QueryUser(uid);
      return recv_QueryUser();

      #else
      var asyncResult = Begin_QueryUser(null, null, uid);
      return End_QueryUser(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryUser(AsyncCallback callback, object state, string uid)
    #else
    public void send_QueryUser(string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryUser", TMessageType.Call, seqid_));
      QueryUser_args args = new QueryUser_args();
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public UserCfg recv_QueryUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryUser_result result = new QueryUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListUserNum(AsyncCallback callback, object state, string uname, string utype, string div_index)
    {
      return send_QueryListUserNum(callback, state, uname, utype, div_index);
    }

    public int End_QueryListUserNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListUserNum();
    }

    #endif

    public int QueryListUserNum(string uname, string utype, string div_index)
    {
      #if !SILVERLIGHT
      send_QueryListUserNum(uname, utype, div_index);
      return recv_QueryListUserNum();

      #else
      var asyncResult = Begin_QueryListUserNum(null, null, uname, utype, div_index);
      return End_QueryListUserNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListUserNum(AsyncCallback callback, object state, string uname, string utype, string div_index)
    #else
    public void send_QueryListUserNum(string uname, string utype, string div_index)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListUserNum", TMessageType.Call, seqid_));
      QueryListUserNum_args args = new QueryListUserNum_args();
      args.Uname = uname;
      args.Utype = utype;
      args.Div_index = div_index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryListUserNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListUserNum_result result = new QueryListUserNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListUserNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListUser(AsyncCallback callback, object state, string uname, string utype, string div_index, int nPageFirstNum, int nPageNum)
    {
      return send_QueryListUser(callback, state, uname, utype, div_index, nPageFirstNum, nPageNum);
    }

    public List<UserCfg> End_QueryListUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListUser();
    }

    #endif

    public List<UserCfg> QueryListUser(string uname, string utype, string div_index, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryListUser(uname, utype, div_index, nPageFirstNum, nPageNum);
      return recv_QueryListUser();

      #else
      var asyncResult = Begin_QueryListUser(null, null, uname, utype, div_index, nPageFirstNum, nPageNum);
      return End_QueryListUser(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListUser(AsyncCallback callback, object state, string uname, string utype, string div_index, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryListUser(string uname, string utype, string div_index, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListUser", TMessageType.Call, seqid_));
      QueryListUser_args args = new QueryListUser_args();
      args.Uname = uname;
      args.Utype = utype;
      args.Div_index = div_index;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<UserCfg> recv_QueryListUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListUser_result result = new QueryListUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_RecoveryPermission(AsyncCallback callback, object state, string uid, List<ResourceCfg> cfg)
    {
      return send_RecoveryPermission(callback, state, uid, cfg);
    }

    public int End_RecoveryPermission(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_RecoveryPermission();
    }

    #endif

    public int RecoveryPermission(string uid, List<ResourceCfg> cfg)
    {
      #if !SILVERLIGHT
      send_RecoveryPermission(uid, cfg);
      return recv_RecoveryPermission();

      #else
      var asyncResult = Begin_RecoveryPermission(null, null, uid, cfg);
      return End_RecoveryPermission(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_RecoveryPermission(AsyncCallback callback, object state, string uid, List<ResourceCfg> cfg)
    #else
    public void send_RecoveryPermission(string uid, List<ResourceCfg> cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("RecoveryPermission", TMessageType.Call, seqid_));
      RecoveryPermission_args args = new RecoveryPermission_args();
      args.Uid = uid;
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_RecoveryPermission()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      RecoveryPermission_result result = new RecoveryPermission_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RecoveryPermission failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListRecoPermis(AsyncCallback callback, object state, string uid)
    {
      return send_QueryListRecoPermis(callback, state, uid);
    }

    public List<ResourceCfg> End_QueryListRecoPermis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListRecoPermis();
    }

    #endif

    public List<ResourceCfg> QueryListRecoPermis(string uid)
    {
      #if !SILVERLIGHT
      send_QueryListRecoPermis(uid);
      return recv_QueryListRecoPermis();

      #else
      var asyncResult = Begin_QueryListRecoPermis(null, null, uid);
      return End_QueryListRecoPermis(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListRecoPermis(AsyncCallback callback, object state, string uid)
    #else
    public void send_QueryListRecoPermis(string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListRecoPermis", TMessageType.Call, seqid_));
      QueryListRecoPermis_args args = new QueryListRecoPermis_args();
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ResourceCfg> recv_QueryListRecoPermis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListRecoPermis_result result = new QueryListRecoPermis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListRecoPermis failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UserLogin(AsyncCallback callback, object state, string uid, string upwd, string wid)
    {
      return send_UserLogin(callback, state, uid, upwd, wid);
    }

    public UserCfg End_UserLogin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UserLogin();
    }

    #endif

    public UserCfg UserLogin(string uid, string upwd, string wid)
    {
      #if !SILVERLIGHT
      send_UserLogin(uid, upwd, wid);
      return recv_UserLogin();

      #else
      var asyncResult = Begin_UserLogin(null, null, uid, upwd, wid);
      return End_UserLogin(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UserLogin(AsyncCallback callback, object state, string uid, string upwd, string wid)
    #else
    public void send_UserLogin(string uid, string upwd, string wid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UserLogin", TMessageType.Call, seqid_));
      UserLogin_args args = new UserLogin_args();
      args.Uid = uid;
      args.Upwd = upwd;
      args.Wid = wid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public UserCfg recv_UserLogin()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UserLogin_result result = new UserLogin_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UserLogin failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UserLoginOff(AsyncCallback callback, object state, string uid, string div_index)
    {
      return send_UserLoginOff(callback, state, uid, div_index);
    }

    public int End_UserLoginOff(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UserLoginOff();
    }

    #endif

    public int UserLoginOff(string uid, string div_index)
    {
      #if !SILVERLIGHT
      send_UserLoginOff(uid, div_index);
      return recv_UserLoginOff();

      #else
      var asyncResult = Begin_UserLoginOff(null, null, uid, div_index);
      return End_UserLoginOff(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UserLoginOff(AsyncCallback callback, object state, string uid, string div_index)
    #else
    public void send_UserLoginOff(string uid, string div_index)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UserLoginOff", TMessageType.Call, seqid_));
      UserLoginOff_args args = new UserLoginOff_args();
      args.Uid = uid;
      args.Div_index = div_index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UserLoginOff()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UserLoginOff_result result = new UserLoginOff_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UserLoginOff failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddTmpGroup(AsyncCallback callback, object state, TmpGroupCfg cfg)
    {
      return send_AddTmpGroup(callback, state, cfg);
    }

    public int End_AddTmpGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddTmpGroup();
    }

    #endif

    public int AddTmpGroup(TmpGroupCfg cfg)
    {
      #if !SILVERLIGHT
      send_AddTmpGroup(cfg);
      return recv_AddTmpGroup();

      #else
      var asyncResult = Begin_AddTmpGroup(null, null, cfg);
      return End_AddTmpGroup(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddTmpGroup(AsyncCallback callback, object state, TmpGroupCfg cfg)
    #else
    public void send_AddTmpGroup(TmpGroupCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddTmpGroup", TMessageType.Call, seqid_));
      AddTmpGroup_args args = new AddTmpGroup_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddTmpGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddTmpGroup_result result = new AddTmpGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTmpGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelTmpGroup(AsyncCallback callback, object state, string tmpgid)
    {
      return send_DelTmpGroup(callback, state, tmpgid);
    }

    public int End_DelTmpGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelTmpGroup();
    }

    #endif

    public int DelTmpGroup(string tmpgid)
    {
      #if !SILVERLIGHT
      send_DelTmpGroup(tmpgid);
      return recv_DelTmpGroup();

      #else
      var asyncResult = Begin_DelTmpGroup(null, null, tmpgid);
      return End_DelTmpGroup(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelTmpGroup(AsyncCallback callback, object state, string tmpgid)
    #else
    public void send_DelTmpGroup(string tmpgid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelTmpGroup", TMessageType.Call, seqid_));
      DelTmpGroup_args args = new DelTmpGroup_args();
      args.Tmpgid = tmpgid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelTmpGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelTmpGroup_result result = new DelTmpGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelTmpGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModTmpGroup(AsyncCallback callback, object state, TmpGroupCfg cfg)
    {
      return send_ModTmpGroup(callback, state, cfg);
    }

    public int End_ModTmpGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModTmpGroup();
    }

    #endif

    public int ModTmpGroup(TmpGroupCfg cfg)
    {
      #if !SILVERLIGHT
      send_ModTmpGroup(cfg);
      return recv_ModTmpGroup();

      #else
      var asyncResult = Begin_ModTmpGroup(null, null, cfg);
      return End_ModTmpGroup(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModTmpGroup(AsyncCallback callback, object state, TmpGroupCfg cfg)
    #else
    public void send_ModTmpGroup(TmpGroupCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModTmpGroup", TMessageType.Call, seqid_));
      ModTmpGroup_args args = new ModTmpGroup_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModTmpGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModTmpGroup_result result = new ModTmpGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModTmpGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryTmpGroup(AsyncCallback callback, object state, string tmpgid)
    {
      return send_QueryTmpGroup(callback, state, tmpgid);
    }

    public TmpGroupCfg End_QueryTmpGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryTmpGroup();
    }

    #endif

    public TmpGroupCfg QueryTmpGroup(string tmpgid)
    {
      #if !SILVERLIGHT
      send_QueryTmpGroup(tmpgid);
      return recv_QueryTmpGroup();

      #else
      var asyncResult = Begin_QueryTmpGroup(null, null, tmpgid);
      return End_QueryTmpGroup(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryTmpGroup(AsyncCallback callback, object state, string tmpgid)
    #else
    public void send_QueryTmpGroup(string tmpgid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryTmpGroup", TMessageType.Call, seqid_));
      QueryTmpGroup_args args = new QueryTmpGroup_args();
      args.Tmpgid = tmpgid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TmpGroupCfg recv_QueryTmpGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryTmpGroup_result result = new QueryTmpGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryTmpGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListTmpGroupNum(AsyncCallback callback, object state, string uid, string tmpgname, string rtype, string resid, string pid)
    {
      return send_QueryListTmpGroupNum(callback, state, uid, tmpgname, rtype, resid, pid);
    }

    public int End_QueryListTmpGroupNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListTmpGroupNum();
    }

    #endif

    public int QueryListTmpGroupNum(string uid, string tmpgname, string rtype, string resid, string pid)
    {
      #if !SILVERLIGHT
      send_QueryListTmpGroupNum(uid, tmpgname, rtype, resid, pid);
      return recv_QueryListTmpGroupNum();

      #else
      var asyncResult = Begin_QueryListTmpGroupNum(null, null, uid, tmpgname, rtype, resid, pid);
      return End_QueryListTmpGroupNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListTmpGroupNum(AsyncCallback callback, object state, string uid, string tmpgname, string rtype, string resid, string pid)
    #else
    public void send_QueryListTmpGroupNum(string uid, string tmpgname, string rtype, string resid, string pid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListTmpGroupNum", TMessageType.Call, seqid_));
      QueryListTmpGroupNum_args args = new QueryListTmpGroupNum_args();
      args.Uid = uid;
      args.Tmpgname = tmpgname;
      args.Rtype = rtype;
      args.Resid = resid;
      args.Pid = pid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryListTmpGroupNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListTmpGroupNum_result result = new QueryListTmpGroupNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListTmpGroupNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListTmpGroup(AsyncCallback callback, object state, string uid, string tmpgname, string rtype, string resid, string pid, int nPageFirstNum, int nPageNum)
    {
      return send_QueryListTmpGroup(callback, state, uid, tmpgname, rtype, resid, pid, nPageFirstNum, nPageNum);
    }

    public List<TmpGroupCfg> End_QueryListTmpGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListTmpGroup();
    }

    #endif

    public List<TmpGroupCfg> QueryListTmpGroup(string uid, string tmpgname, string rtype, string resid, string pid, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryListTmpGroup(uid, tmpgname, rtype, resid, pid, nPageFirstNum, nPageNum);
      return recv_QueryListTmpGroup();

      #else
      var asyncResult = Begin_QueryListTmpGroup(null, null, uid, tmpgname, rtype, resid, pid, nPageFirstNum, nPageNum);
      return End_QueryListTmpGroup(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListTmpGroup(AsyncCallback callback, object state, string uid, string tmpgname, string rtype, string resid, string pid, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryListTmpGroup(string uid, string tmpgname, string rtype, string resid, string pid, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListTmpGroup", TMessageType.Call, seqid_));
      QueryListTmpGroup_args args = new QueryListTmpGroup_args();
      args.Uid = uid;
      args.Tmpgname = tmpgname;
      args.Rtype = rtype;
      args.Resid = resid;
      args.Pid = pid;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TmpGroupCfg> recv_QueryListTmpGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListTmpGroup_result result = new QueryListTmpGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListTmpGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_HearBeat(AsyncCallback callback, object state, string div_index, string uid)
    {
      return send_HearBeat(callback, state, div_index, uid);
    }

    public int End_HearBeat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_HearBeat();
    }

    #endif

    public int HearBeat(string div_index, string uid)
    {
      #if !SILVERLIGHT
      send_HearBeat(div_index, uid);
      return recv_HearBeat();

      #else
      var asyncResult = Begin_HearBeat(null, null, div_index, uid);
      return End_HearBeat(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_HearBeat(AsyncCallback callback, object state, string div_index, string uid)
    #else
    public void send_HearBeat(string div_index, string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("HearBeat", TMessageType.Call, seqid_));
      HearBeat_args args = new HearBeat_args();
      args.Div_index = div_index;
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_HearBeat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      HearBeat_result result = new HearBeat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "HearBeat failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GrantAuth(AsyncCallback callback, object state, string uid, List<AuthCfg> cfg)
    {
      return send_GrantAuth(callback, state, uid, cfg);
    }

    public int End_GrantAuth(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GrantAuth();
    }

    #endif

    public int GrantAuth(string uid, List<AuthCfg> cfg)
    {
      #if !SILVERLIGHT
      send_GrantAuth(uid, cfg);
      return recv_GrantAuth();

      #else
      var asyncResult = Begin_GrantAuth(null, null, uid, cfg);
      return End_GrantAuth(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GrantAuth(AsyncCallback callback, object state, string uid, List<AuthCfg> cfg)
    #else
    public void send_GrantAuth(string uid, List<AuthCfg> cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GrantAuth", TMessageType.Call, seqid_));
      GrantAuth_args args = new GrantAuth_args();
      args.Uid = uid;
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_GrantAuth()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GrantAuth_result result = new GrantAuth_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GrantAuth failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_RevokeAuth(AsyncCallback callback, object state, string uid, List<AuthCfg> cfg)
    {
      return send_RevokeAuth(callback, state, uid, cfg);
    }

    public int End_RevokeAuth(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_RevokeAuth();
    }

    #endif

    public int RevokeAuth(string uid, List<AuthCfg> cfg)
    {
      #if !SILVERLIGHT
      send_RevokeAuth(uid, cfg);
      return recv_RevokeAuth();

      #else
      var asyncResult = Begin_RevokeAuth(null, null, uid, cfg);
      return End_RevokeAuth(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_RevokeAuth(AsyncCallback callback, object state, string uid, List<AuthCfg> cfg)
    #else
    public void send_RevokeAuth(string uid, List<AuthCfg> cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("RevokeAuth", TMessageType.Call, seqid_));
      RevokeAuth_args args = new RevokeAuth_args();
      args.Uid = uid;
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_RevokeAuth()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      RevokeAuth_result result = new RevokeAuth_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RevokeAuth failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListAuth(AsyncCallback callback, object state, string uid)
    {
      return send_QueryListAuth(callback, state, uid);
    }

    public List<AuthCfg> End_QueryListAuth(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListAuth();
    }

    #endif

    public List<AuthCfg> QueryListAuth(string uid)
    {
      #if !SILVERLIGHT
      send_QueryListAuth(uid);
      return recv_QueryListAuth();

      #else
      var asyncResult = Begin_QueryListAuth(null, null, uid);
      return End_QueryListAuth(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListAuth(AsyncCallback callback, object state, string uid)
    #else
    public void send_QueryListAuth(string uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListAuth", TMessageType.Call, seqid_));
      QueryListAuth_args args = new QueryListAuth_args();
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<AuthCfg> recv_QueryListAuth()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListAuth_result result = new QueryListAuth_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListAuth failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ClientRegion(AsyncCallback callback, object state, ClientCfg cfg)
    {
      return send_ClientRegion(callback, state, cfg);
    }

    public string End_ClientRegion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ClientRegion();
    }

    #endif

    public string ClientRegion(ClientCfg cfg)
    {
      #if !SILVERLIGHT
      send_ClientRegion(cfg);
      return recv_ClientRegion();

      #else
      var asyncResult = Begin_ClientRegion(null, null, cfg);
      return End_ClientRegion(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ClientRegion(AsyncCallback callback, object state, ClientCfg cfg)
    #else
    public void send_ClientRegion(ClientCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ClientRegion", TMessageType.Call, seqid_));
      ClientRegion_args args = new ClientRegion_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_ClientRegion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ClientRegion_result result = new ClientRegion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ClientRegion failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_VisitorRegion(AsyncCallback callback, object state, VisitorInfo cfg)
    {
      return send_VisitorRegion(callback, state, cfg);
    }

    public CResultCfg End_VisitorRegion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_VisitorRegion();
    }

    #endif

    public CResultCfg VisitorRegion(VisitorInfo cfg)
    {
      #if !SILVERLIGHT
      send_VisitorRegion(cfg);
      return recv_VisitorRegion();

      #else
      var asyncResult = Begin_VisitorRegion(null, null, cfg);
      return End_VisitorRegion(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_VisitorRegion(AsyncCallback callback, object state, VisitorInfo cfg)
    #else
    public void send_VisitorRegion(VisitorInfo cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("VisitorRegion", TMessageType.Call, seqid_));
      VisitorRegion_args args = new VisitorRegion_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public CResultCfg recv_VisitorRegion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      VisitorRegion_result result = new VisitorRegion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VisitorRegion failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UploadCmpLogFromFront(AsyncCallback callback, object state, CmpFaceLogInfo cfg)
    {
      return send_UploadCmpLogFromFront(callback, state, cfg);
    }

    public ErrorInfo End_UploadCmpLogFromFront(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UploadCmpLogFromFront();
    }

    #endif

    public ErrorInfo UploadCmpLogFromFront(CmpFaceLogInfo cfg)
    {
      #if !SILVERLIGHT
      send_UploadCmpLogFromFront(cfg);
      return recv_UploadCmpLogFromFront();

      #else
      var asyncResult = Begin_UploadCmpLogFromFront(null, null, cfg);
      return End_UploadCmpLogFromFront(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UploadCmpLogFromFront(AsyncCallback callback, object state, CmpFaceLogInfo cfg)
    #else
    public void send_UploadCmpLogFromFront(CmpFaceLogInfo cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UploadCmpLogFromFront", TMessageType.Call, seqid_));
      UploadCmpLogFromFront_args args = new UploadCmpLogFromFront_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ErrorInfo recv_UploadCmpLogFromFront()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UploadCmpLogFromFront_result result = new UploadCmpLogFromFront_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadCmpLogFromFront failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_VisitorVerifi(AsyncCallback callback, object state, List<string> img, string channelID, string channelname)
    {
      return send_VisitorVerifi(callback, state, img, channelID, channelname);
    }

    public List<CResultCfg> End_VisitorVerifi(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_VisitorVerifi();
    }

    #endif

    public List<CResultCfg> VisitorVerifi(List<string> img, string channelID, string channelname)
    {
      #if !SILVERLIGHT
      send_VisitorVerifi(img, channelID, channelname);
      return recv_VisitorVerifi();

      #else
      var asyncResult = Begin_VisitorVerifi(null, null, img, channelID, channelname);
      return End_VisitorVerifi(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_VisitorVerifi(AsyncCallback callback, object state, List<string> img, string channelID, string channelname)
    #else
    public void send_VisitorVerifi(List<string> img, string channelID, string channelname)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("VisitorVerifi", TMessageType.Call, seqid_));
      VisitorVerifi_args args = new VisitorVerifi_args();
      args.Img = img;
      args.ChannelID = channelID;
      args.Channelname = channelname;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CResultCfg> recv_VisitorVerifi()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      VisitorVerifi_result result = new VisitorVerifi_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VisitorVerifi failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["UpLoadCapFace"] = UpLoadCapFace_Process;
      processMap_["UpLoadCapFace1"] = UpLoadCapFace1_Process;
      processMap_["OpenChannel"] = OpenChannel_Process;
      processMap_["CloseChannel"] = CloseChannel_Process;
      processMap_["OpenAllChannel"] = OpenAllChannel_Process;
      processMap_["CloseAllChannel"] = CloseAllChannel_Process;
      processMap_["AddChannel"] = AddChannel_Process;
      processMap_["DelChannel"] = DelChannel_Process;
      processMap_["ModifyChannel"] = ModifyChannel_Process;
      processMap_["QueryAllChannel"] = QueryAllChannel_Process;
      processMap_["QueryChannel"] = QueryChannel_Process;
      processMap_["QueryCapDetails"] = QueryCapDetails_Process;
      processMap_["QueryCapLog"] = QueryCapLog_Process;
      processMap_["QueryCapLogImage"] = QueryCapLogImage_Process;
      processMap_["QueryCapRecordTotalCount"] = QueryCapRecordTotalCount_Process;
      processMap_["QueryCapLogWithImg"] = QueryCapLogWithImg_Process;
      processMap_["QueryCmpLog"] = QueryCmpLog_Process;
      processMap_["QueryCmpLogImage"] = QueryCmpLogImage_Process;
      processMap_["QueryCmpLogWidthImg"] = QueryCmpLogWidthImg_Process;
      processMap_["QueryCmpByCapIdWidthImg"] = QueryCmpByCapIdWidthImg_Process;
      processMap_["QueryCmpRecordTotalCount"] = QueryCmpRecordTotalCount_Process;
      processMap_["CompareImg"] = CompareImg_Process;
      processMap_["QueryFaceObj"] = QueryFaceObj_Process;
      processMap_["QueryFaceObjByImg"] = QueryFaceObjByImg_Process;
      processMap_["QueryFaceObjTotalCount"] = QueryFaceObjTotalCount_Process;
      processMap_["AddFaceObj"] = AddFaceObj_Process;
      processMap_["DelFaceObj"] = DelFaceObj_Process;
      processMap_["ModifyFaceObj"] = ModifyFaceObj_Process;
      processMap_["QueryDefGender"] = QueryDefGender_Process;
      processMap_["QueryDefFaceObjType"] = QueryDefFaceObjType_Process;
      processMap_["QueryDefChannelType"] = QueryDefChannelType_Process;
      processMap_["QueryDefCameraType"] = QueryDefCameraType_Process;
      processMap_["AddZone"] = AddZone_Process;
      processMap_["DelZone"] = DelZone_Process;
      processMap_["ModZone"] = ModZone_Process;
      processMap_["QueryZone"] = QueryZone_Process;
      processMap_["QueryListZoneNum"] = QueryListZoneNum_Process;
      processMap_["QueryListZone"] = QueryListZone_Process;
      processMap_["AddUser"] = AddUser_Process;
      processMap_["DelUser"] = DelUser_Process;
      processMap_["ModUser"] = ModUser_Process;
      processMap_["QueryUser"] = QueryUser_Process;
      processMap_["QueryListUserNum"] = QueryListUserNum_Process;
      processMap_["QueryListUser"] = QueryListUser_Process;
      processMap_["RecoveryPermission"] = RecoveryPermission_Process;
      processMap_["QueryListRecoPermis"] = QueryListRecoPermis_Process;
      processMap_["UserLogin"] = UserLogin_Process;
      processMap_["UserLoginOff"] = UserLoginOff_Process;
      processMap_["AddTmpGroup"] = AddTmpGroup_Process;
      processMap_["DelTmpGroup"] = DelTmpGroup_Process;
      processMap_["ModTmpGroup"] = ModTmpGroup_Process;
      processMap_["QueryTmpGroup"] = QueryTmpGroup_Process;
      processMap_["QueryListTmpGroupNum"] = QueryListTmpGroupNum_Process;
      processMap_["QueryListTmpGroup"] = QueryListTmpGroup_Process;
      processMap_["HearBeat"] = HearBeat_Process;
      processMap_["GrantAuth"] = GrantAuth_Process;
      processMap_["RevokeAuth"] = RevokeAuth_Process;
      processMap_["QueryListAuth"] = QueryListAuth_Process;
      processMap_["ClientRegion"] = ClientRegion_Process;
      processMap_["VisitorRegion"] = VisitorRegion_Process;
      processMap_["UploadCmpLogFromFront"] = UploadCmpLogFromFront_Process;
      processMap_["VisitorVerifi"] = VisitorVerifi_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void UpLoadCapFace_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFace_args args = new UpLoadCapFace_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFace_result result = new UpLoadCapFace_result();
      result.Success = iface_.UpLoadCapFace(args.Fi, args.NFeaLen, args.Feature, args.NImgLen, args.Image);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFace", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpLoadCapFace1_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFace1_args args = new UpLoadCapFace1_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFace1_result result = new UpLoadCapFace1_result();
      result.Success = iface_.UpLoadCapFace1(args.ChannelID, args.Index, args.TimeIn, args.TimeOut, args.Age, args.Gender, args.Fis);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFace1", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void OpenChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      OpenChannel_args args = new OpenChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      OpenChannel_result result = new OpenChannel_result();
      result.Success = iface_.OpenChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("OpenChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CloseChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CloseChannel_args args = new CloseChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CloseChannel_result result = new CloseChannel_result();
      result.Success = iface_.CloseChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("CloseChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void OpenAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      OpenAllChannel_args args = new OpenAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      OpenAllChannel_result result = new OpenAllChannel_result();
      result.Success = iface_.OpenAllChannel(args.Div_index);
      oprot.WriteMessageBegin(new TMessage("OpenAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CloseAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CloseAllChannel_args args = new CloseAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CloseAllChannel_result result = new CloseAllChannel_result();
      result.Success = iface_.CloseAllChannel(args.Div_index);
      oprot.WriteMessageBegin(new TMessage("CloseAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddChannel_args args = new AddChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddChannel_result result = new AddChannel_result();
      result.Success = iface_.AddChannel(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelChannel_args args = new DelChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelChannel_result result = new DelChannel_result();
      result.Success = iface_.DelChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("DelChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModifyChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModifyChannel_args args = new ModifyChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModifyChannel_result result = new ModifyChannel_result();
      result.Success = iface_.ModifyChannel(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModifyChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryAllChannel_args args = new QueryAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryAllChannel_result result = new QueryAllChannel_result();
      result.Success = iface_.QueryAllChannel(args.Div_index);
      oprot.WriteMessageBegin(new TMessage("QueryAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryChannel_args args = new QueryChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryChannel_result result = new QueryChannel_result();
      result.Success = iface_.QueryChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("QueryChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapDetails_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapDetails_args args = new QueryCapDetails_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapDetails_result result = new QueryCapDetails_result();
      result.Success = iface_.QueryCapDetails(args.Id);
      oprot.WriteMessageBegin(new TMessage("QueryCapDetails", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLog_args args = new QueryCapLog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLog_result result = new QueryCapLog_result();
      result.Success = iface_.QueryCapLog(args.Channel, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Div_index, args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryCapLog", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogImage_args args = new QueryCapLogImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogImage_result result = new QueryCapLogImage_result();
      result.Success = iface_.QueryCapLogImage(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogImage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapRecordTotalCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapRecordTotalCount_args args = new QueryCapRecordTotalCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapRecordTotalCount_result result = new QueryCapRecordTotalCount_result();
      result.Success = iface_.QueryCapRecordTotalCount(args.Channel, args.Btime, args.Etime, args.Div_index, args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryCapRecordTotalCount", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogWithImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogWithImg_args args = new QueryCapLogWithImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogWithImg_result result = new QueryCapLogWithImg_result();
      result.Success = iface_.QueryCapLogWithImg(args.Channel, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Div_index, args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogWithImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLog_args args = new QueryCmpLog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLog_result result = new QueryCmpLog_result();
      result.Success = iface_.QueryCmpLog(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Div_index, args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLog", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogImage_args args = new QueryCmpLogImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogImage_result result = new QueryCmpLogImage_result();
      result.Success = iface_.QueryCmpLogImage(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogImage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogWidthImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogWidthImg_args args = new QueryCmpLogWidthImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogWidthImg_result result = new QueryCmpLogWidthImg_result();
      result.Success = iface_.QueryCmpLogWidthImg(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Div_index, args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogWidthImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpByCapIdWidthImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpByCapIdWidthImg_args args = new QueryCmpByCapIdWidthImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpByCapIdWidthImg_result result = new QueryCmpByCapIdWidthImg_result();
      result.Success = iface_.QueryCmpByCapIdWidthImg(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCount_args args = new QueryCmpRecordTotalCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCount_result result = new QueryCmpRecordTotalCount_result();
      result.Success = iface_.QueryCmpRecordTotalCount(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Div_index, args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCount", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CompareImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CompareImg_args args = new CompareImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CompareImg_result result = new CompareImg_result();
      result.Success = iface_.CompareImg(args.Image, args.NThreshold, args.NMaxCount);
      oprot.WriteMessageBegin(new TMessage("CompareImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryFaceObj_args args = new QueryFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryFaceObj_result result = new QueryFaceObj_result();
      result.Success = iface_.QueryFaceObj(args.Id, args.Name, args.Bage, args.Eage, args.Gender, args.Type, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryFaceObjByImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryFaceObjByImg_args args = new QueryFaceObjByImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryFaceObjByImg_result result = new QueryFaceObjByImg_result();
      result.Success = iface_.QueryFaceObjByImg(args.Image, args.NThreshold, args.NMaxCount);
      oprot.WriteMessageBegin(new TMessage("QueryFaceObjByImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryFaceObjTotalCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryFaceObjTotalCount_args args = new QueryFaceObjTotalCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryFaceObjTotalCount_result result = new QueryFaceObjTotalCount_result();
      result.Success = iface_.QueryFaceObjTotalCount(args.Id, args.Name, args.Bage, args.Eage, args.Gender, args.Type, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryFaceObjTotalCount", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddFaceObj_args args = new AddFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddFaceObj_result result = new AddFaceObj_result();
      result.Success = iface_.AddFaceObj(args.Obj);
      oprot.WriteMessageBegin(new TMessage("AddFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelFaceObj_args args = new DelFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelFaceObj_result result = new DelFaceObj_result();
      result.Success = iface_.DelFaceObj(args.ID);
      oprot.WriteMessageBegin(new TMessage("DelFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModifyFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModifyFaceObj_args args = new ModifyFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModifyFaceObj_result result = new ModifyFaceObj_result();
      result.Success = iface_.ModifyFaceObj(args.Id, args.Obj);
      oprot.WriteMessageBegin(new TMessage("ModifyFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefGender_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefGender_args args = new QueryDefGender_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefGender_result result = new QueryDefGender_result();
      result.Success = iface_.QueryDefGender();
      oprot.WriteMessageBegin(new TMessage("QueryDefGender", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefFaceObjType_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefFaceObjType_args args = new QueryDefFaceObjType_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefFaceObjType_result result = new QueryDefFaceObjType_result();
      result.Success = iface_.QueryDefFaceObjType();
      oprot.WriteMessageBegin(new TMessage("QueryDefFaceObjType", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefChannelType_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefChannelType_args args = new QueryDefChannelType_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefChannelType_result result = new QueryDefChannelType_result();
      result.Success = iface_.QueryDefChannelType();
      oprot.WriteMessageBegin(new TMessage("QueryDefChannelType", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefCameraType_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefCameraType_args args = new QueryDefCameraType_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefCameraType_result result = new QueryDefCameraType_result();
      result.Success = iface_.QueryDefCameraType();
      oprot.WriteMessageBegin(new TMessage("QueryDefCameraType", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddZone_args args = new AddZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddZone_result result = new AddZone_result();
      result.Success = iface_.AddZone(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddZone", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelZone_args args = new DelZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelZone_result result = new DelZone_result();
      result.Success = iface_.DelZone(args.Div_index);
      oprot.WriteMessageBegin(new TMessage("DelZone", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModZone_args args = new ModZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModZone_result result = new ModZone_result();
      result.Success = iface_.ModZone(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModZone", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryZone_args args = new QueryZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryZone_result result = new QueryZone_result();
      result.Success = iface_.QueryZone(args.Div_index);
      oprot.WriteMessageBegin(new TMessage("QueryZone", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListZoneNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListZoneNum_args args = new QueryListZoneNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListZoneNum_result result = new QueryListZoneNum_result();
      result.Success = iface_.QueryListZoneNum(args.Div_name, args.Div_parent, args.Div_order);
      oprot.WriteMessageBegin(new TMessage("QueryListZoneNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListZone_args args = new QueryListZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListZone_result result = new QueryListZone_result();
      result.Success = iface_.QueryListZone(args.Div_name, args.Div_parent, args.Div_order, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryListZone", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddUser_args args = new AddUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddUser_result result = new AddUser_result();
      result.Success = iface_.AddUser(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddUser", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelUser_args args = new DelUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelUser_result result = new DelUser_result();
      result.Success = iface_.DelUser(args.Uid, args.Loginuid);
      oprot.WriteMessageBegin(new TMessage("DelUser", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModUser_args args = new ModUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModUser_result result = new ModUser_result();
      result.Success = iface_.ModUser(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModUser", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryUser_args args = new QueryUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryUser_result result = new QueryUser_result();
      result.Success = iface_.QueryUser(args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryUser", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListUserNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListUserNum_args args = new QueryListUserNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListUserNum_result result = new QueryListUserNum_result();
      result.Success = iface_.QueryListUserNum(args.Uname, args.Utype, args.Div_index);
      oprot.WriteMessageBegin(new TMessage("QueryListUserNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListUser_args args = new QueryListUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListUser_result result = new QueryListUser_result();
      result.Success = iface_.QueryListUser(args.Uname, args.Utype, args.Div_index, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryListUser", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void RecoveryPermission_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      RecoveryPermission_args args = new RecoveryPermission_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      RecoveryPermission_result result = new RecoveryPermission_result();
      result.Success = iface_.RecoveryPermission(args.Uid, args.Cfg);
      oprot.WriteMessageBegin(new TMessage("RecoveryPermission", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListRecoPermis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListRecoPermis_args args = new QueryListRecoPermis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListRecoPermis_result result = new QueryListRecoPermis_result();
      result.Success = iface_.QueryListRecoPermis(args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryListRecoPermis", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UserLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UserLogin_args args = new UserLogin_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UserLogin_result result = new UserLogin_result();
      result.Success = iface_.UserLogin(args.Uid, args.Upwd, args.Wid);
      oprot.WriteMessageBegin(new TMessage("UserLogin", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UserLoginOff_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UserLoginOff_args args = new UserLoginOff_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UserLoginOff_result result = new UserLoginOff_result();
      result.Success = iface_.UserLoginOff(args.Uid, args.Div_index);
      oprot.WriteMessageBegin(new TMessage("UserLoginOff", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddTmpGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddTmpGroup_args args = new AddTmpGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddTmpGroup_result result = new AddTmpGroup_result();
      result.Success = iface_.AddTmpGroup(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddTmpGroup", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelTmpGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelTmpGroup_args args = new DelTmpGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelTmpGroup_result result = new DelTmpGroup_result();
      result.Success = iface_.DelTmpGroup(args.Tmpgid);
      oprot.WriteMessageBegin(new TMessage("DelTmpGroup", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModTmpGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModTmpGroup_args args = new ModTmpGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModTmpGroup_result result = new ModTmpGroup_result();
      result.Success = iface_.ModTmpGroup(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModTmpGroup", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryTmpGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryTmpGroup_args args = new QueryTmpGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryTmpGroup_result result = new QueryTmpGroup_result();
      result.Success = iface_.QueryTmpGroup(args.Tmpgid);
      oprot.WriteMessageBegin(new TMessage("QueryTmpGroup", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListTmpGroupNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListTmpGroupNum_args args = new QueryListTmpGroupNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListTmpGroupNum_result result = new QueryListTmpGroupNum_result();
      result.Success = iface_.QueryListTmpGroupNum(args.Uid, args.Tmpgname, args.Rtype, args.Resid, args.Pid);
      oprot.WriteMessageBegin(new TMessage("QueryListTmpGroupNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListTmpGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListTmpGroup_args args = new QueryListTmpGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListTmpGroup_result result = new QueryListTmpGroup_result();
      result.Success = iface_.QueryListTmpGroup(args.Uid, args.Tmpgname, args.Rtype, args.Resid, args.Pid, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryListTmpGroup", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void HearBeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      HearBeat_args args = new HearBeat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      HearBeat_result result = new HearBeat_result();
      result.Success = iface_.HearBeat(args.Div_index, args.Uid);
      oprot.WriteMessageBegin(new TMessage("HearBeat", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GrantAuth_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GrantAuth_args args = new GrantAuth_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GrantAuth_result result = new GrantAuth_result();
      result.Success = iface_.GrantAuth(args.Uid, args.Cfg);
      oprot.WriteMessageBegin(new TMessage("GrantAuth", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void RevokeAuth_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      RevokeAuth_args args = new RevokeAuth_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      RevokeAuth_result result = new RevokeAuth_result();
      result.Success = iface_.RevokeAuth(args.Uid, args.Cfg);
      oprot.WriteMessageBegin(new TMessage("RevokeAuth", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListAuth_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListAuth_args args = new QueryListAuth_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListAuth_result result = new QueryListAuth_result();
      result.Success = iface_.QueryListAuth(args.Uid);
      oprot.WriteMessageBegin(new TMessage("QueryListAuth", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ClientRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ClientRegion_args args = new ClientRegion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ClientRegion_result result = new ClientRegion_result();
      result.Success = iface_.ClientRegion(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ClientRegion", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void VisitorRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      VisitorRegion_args args = new VisitorRegion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      VisitorRegion_result result = new VisitorRegion_result();
      result.Success = iface_.VisitorRegion(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("VisitorRegion", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UploadCmpLogFromFront_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UploadCmpLogFromFront_args args = new UploadCmpLogFromFront_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UploadCmpLogFromFront_result result = new UploadCmpLogFromFront_result();
      result.Success = iface_.UploadCmpLogFromFront(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("UploadCmpLogFromFront", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void VisitorVerifi_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      VisitorVerifi_args args = new VisitorVerifi_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      VisitorVerifi_result result = new VisitorVerifi_result();
      result.Success = iface_.VisitorVerifi(args.Img, args.ChannelID, args.Channelname);
      oprot.WriteMessageBegin(new TMessage("VisitorVerifi", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace_args : TBase
  {
    private FaceInfo _fi;
    private int _nFeaLen;
    private byte[] _Feature;
    private int _nImgLen;
    private byte[] _Image;

    public FaceInfo Fi
    {
      get
      {
        return _fi;
      }
      set
      {
        __isset.fi = true;
        this._fi = value;
      }
    }

    public int NFeaLen
    {
      get
      {
        return _nFeaLen;
      }
      set
      {
        __isset.nFeaLen = true;
        this._nFeaLen = value;
      }
    }

    public byte[] Feature
    {
      get
      {
        return _Feature;
      }
      set
      {
        __isset.Feature = true;
        this._Feature = value;
      }
    }

    public int NImgLen
    {
      get
      {
        return _nImgLen;
      }
      set
      {
        __isset.nImgLen = true;
        this._nImgLen = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return _Image;
      }
      set
      {
        __isset.Image = true;
        this._Image = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fi;
      public bool nFeaLen;
      public bool Feature;
      public bool nImgLen;
      public bool Image;
    }

    public UpLoadCapFace_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Fi = new FaceInfo();
                Fi.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NFeaLen = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NImgLen = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Image = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Fi != null && __isset.fi) {
          field.Name = "fi";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Fi.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.nFeaLen) {
          field.Name = "nFeaLen";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NFeaLen);
          oprot.WriteFieldEnd();
        }
        if (Feature != null && __isset.Feature) {
          field.Name = "Feature";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (__isset.nImgLen) {
          field.Name = "nImgLen";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NImgLen);
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.Image) {
          field.Name = "Image";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Image);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace_args(");
      bool __first = true;
      if (Fi != null && __isset.fi) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fi: ");
        __sb.Append(Fi== null ? "<null>" : Fi.ToString());
      }
      if (__isset.nFeaLen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NFeaLen: ");
        __sb.Append(NFeaLen);
      }
      if (Feature != null && __isset.Feature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (__isset.nImgLen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NImgLen: ");
        __sb.Append(NImgLen);
      }
      if (Image != null && __isset.Image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFace_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace1_args : TBase
  {
    private string _ChannelID;
    private int _index;
    private long _timeIn;
    private long _timeOut;
    private int _age;
    private int _gender;
    private List<FaceInfo> _fis;

    public string ChannelID
    {
      get
      {
        return _ChannelID;
      }
      set
      {
        __isset.ChannelID = true;
        this._ChannelID = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public long TimeIn
    {
      get
      {
        return _timeIn;
      }
      set
      {
        __isset.timeIn = true;
        this._timeIn = value;
      }
    }

    public long TimeOut
    {
      get
      {
        return _timeOut;
      }
      set
      {
        __isset.timeOut = true;
        this._timeOut = value;
      }
    }

    public int Age
    {
      get
      {
        return _age;
      }
      set
      {
        __isset.age = true;
        this._age = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public List<FaceInfo> Fis
    {
      get
      {
        return _fis;
      }
      set
      {
        __isset.fis = true;
        this._fis = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ChannelID;
      public bool index;
      public bool timeIn;
      public bool timeOut;
      public bool age;
      public bool gender;
      public bool fis;
    }

    public UpLoadCapFace1_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TimeIn = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                TimeOut = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Age = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Fis = new List<FaceInfo>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    FaceInfo _elem46;
                    _elem46 = new FaceInfo();
                    _elem46.Read(iprot);
                    Fis.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace1_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.ChannelID) {
          field.Name = "ChannelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeIn) {
          field.Name = "timeIn";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeIn);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOut) {
          field.Name = "timeOut";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeOut);
          oprot.WriteFieldEnd();
        }
        if (__isset.age) {
          field.Name = "age";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Age);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (Fis != null && __isset.fis) {
          field.Name = "fis";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fis.Count));
            foreach (FaceInfo _iter47 in Fis)
            {
              _iter47.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace1_args(");
      bool __first = true;
      if (ChannelID != null && __isset.ChannelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      if (__isset.timeIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeIn: ");
        __sb.Append(TimeIn);
      }
      if (__isset.timeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      if (__isset.age) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Age: ");
        __sb.Append(Age);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (Fis != null && __isset.fis) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fis: ");
        __sb.Append(Fis);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace1_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFace1_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace1_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace1_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public OpenChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public OpenChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public CloseChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CloseChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenAllChannel_args : TBase
  {
    private string _div_index;

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_index;
    }

    public OpenAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenAllChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenAllChannel_args(");
      bool __first = true;
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenAllChannel_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public OpenAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list48 = iprot.ReadListBegin();
                  for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    string _elem50;
                    _elem50 = iprot.ReadString();
                    Success.Add(_elem50);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter51 in Success)
              {
                oprot.WriteString(_iter51);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenAllChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseAllChannel_args : TBase
  {
    private string _div_index;

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_index;
    }

    public CloseAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseAllChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseAllChannel_args(");
      bool __first = true;
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseAllChannel_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CloseAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    string _elem54;
                    _elem54 = iprot.ReadString();
                    Success.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter55 in Success)
              {
                oprot.WriteString(_iter55);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseAllChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannel_args : TBase
  {
    private ChannelCfg _cfg;

    public ChannelCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannel_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public DelChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannel_args : TBase
  {
    private ChannelCfg _cfg;

    public ChannelCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModifyChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannel_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModifyChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannel_args : TBase
  {
    private string _div_index;

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_index;
    }

    public QueryAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannel_args(");
      bool __first = true;
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannel_result : TBase
  {
    private List<ChannelCfg> _success;

    public List<ChannelCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelCfg>();
                  TList _list56 = iprot.ReadListBegin();
                  for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                  {
                    ChannelCfg _elem58;
                    _elem58 = new ChannelCfg();
                    _elem58.Read(iprot);
                    Success.Add(_elem58);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelCfg _iter59 in Success)
              {
                _iter59.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public QueryChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannel_result : TBase
  {
    private ChannelCfg _success;

    public ChannelCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetails_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public QueryCapDetails_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetails_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetails_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetails_result : TBase
  {
    private List<CapObjImg> _success;

    public List<CapObjImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapDetails_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapObjImg>();
                  TList _list60 = iprot.ReadListBegin();
                  for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                  {
                    CapObjImg _elem62;
                    _elem62 = new CapObjImg();
                    _elem62.Read(iprot);
                    Success.Add(_elem62);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetails_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapObjImg _iter63 in Success)
              {
                _iter63.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetails_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLog_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private string _div_index;
    private string _uid;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool div_index;
      public bool uid;
    }

    public QueryCapLog_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLog_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLog_result : TBase
  {
    private List<CapFaceLog> _success;

    public List<CapFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLog_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLog>();
                  TList _list64 = iprot.ReadListBegin();
                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    CapFaceLog _elem66;
                    _elem66 = new CapFaceLog();
                    _elem66.Read(iprot);
                    Success.Add(_elem66);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLog _iter67 in Success)
              {
                _iter67.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLog_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImage_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryCapLogImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImage_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImage_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list68 = iprot.ReadListBegin();
                  for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                  {
                    byte[] _elem70;
                    _elem70 = iprot.ReadBinary();
                    Success.Add(_elem70);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter71 in Success)
              {
                oprot.WriteBinary(_iter71);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCount_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;
    private string _div_index;
    private string _uid;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool div_index;
      public bool uid;
    }

    public QueryCapRecordTotalCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCount_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCount_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapRecordTotalCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogWithImg_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private string _div_index;
    private string _uid;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool div_index;
      public bool uid;
    }

    public QueryCapLogWithImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogWithImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogWithImg_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogWithImg_result : TBase
  {
    private List<CapFaceLogWithImg> _success;

    public List<CapFaceLogWithImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogWithImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLogWithImg>();
                  TList _list72 = iprot.ReadListBegin();
                  for( int _i73 = 0; _i73 < _list72.Count; ++_i73)
                  {
                    CapFaceLogWithImg _elem74;
                    _elem74 = new CapFaceLogWithImg();
                    _elem74.Read(iprot);
                    Success.Add(_elem74);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogWithImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLogWithImg _iter75 in Success)
              {
                _iter75.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogWithImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLog_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private string _div_index;
    private string _uid;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool div_index;
      public bool uid;
    }

    public QueryCmpLog_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLog_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLog_result : TBase
  {
    private List<CmpFaceLog> _success;

    public List<CmpFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLog_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLog>();
                  TList _list76 = iprot.ReadListBegin();
                  for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                  {
                    CmpFaceLog _elem78;
                    _elem78 = new CmpFaceLog();
                    _elem78.Read(iprot);
                    Success.Add(_elem78);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLog _iter79 in Success)
              {
                _iter79.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLog_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImage_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryCmpLogImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImage_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImage_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list80 = iprot.ReadListBegin();
                  for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                  {
                    byte[] _elem82;
                    _elem82 = iprot.ReadBinary();
                    Success.Add(_elem82);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter83 in Success)
              {
                oprot.WriteBinary(_iter83);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImg_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private string _div_index;
    private string _uid;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool div_index;
      public bool uid;
    }

    public QueryCmpLogWidthImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImg_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImg_result : TBase
  {
    private List<CmpFaceLogWidthImg> _success;

    public List<CmpFaceLogWidthImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogWidthImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImg>();
                  TList _list84 = iprot.ReadListBegin();
                  for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                  {
                    CmpFaceLogWidthImg _elem86;
                    _elem86 = new CmpFaceLogWidthImg();
                    _elem86.Read(iprot);
                    Success.Add(_elem86);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImg _iter87 in Success)
              {
                _iter87.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImg_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryCmpByCapIdWidthImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImg_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImg_result : TBase
  {
    private List<CmpFaceLogWidthImg> _success;

    public List<CmpFaceLogWidthImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpByCapIdWidthImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImg>();
                  TList _list88 = iprot.ReadListBegin();
                  for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                  {
                    CmpFaceLogWidthImg _elem90;
                    _elem90 = new CmpFaceLogWidthImg();
                    _elem90.Read(iprot);
                    Success.Add(_elem90);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImg _iter91 in Success)
              {
                _iter91.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCount_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private string _div_index;
    private string _uid;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool div_index;
      public bool uid;
    }

    public QueryCmpRecordTotalCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCount_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCount_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareImg_args : TBase
  {
    private byte[] _image;
    private int _nThreshold;
    private int _nMaxCount;

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool image;
      public bool nThreshold;
      public bool nMaxCount;
    }

    public CompareImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Image = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Image);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareImg_args(");
      bool __first = true;
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareImg_result : TBase
  {
    private List<CompareImgResult> _success;

    public List<CompareImgResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CompareImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompareImgResult>();
                  TList _list92 = iprot.ReadListBegin();
                  for( int _i93 = 0; _i93 < _list92.Count; ++_i93)
                  {
                    CompareImgResult _elem94;
                    _elem94 = new CompareImgResult();
                    _elem94.Read(iprot);
                    Success.Add(_elem94);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompareImgResult _iter95 in Success)
              {
                _iter95.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObj_args : TBase
  {
    private string _id;
    private string _name;
    private int _bage;
    private int _eage;
    private int _gender;
    private int _type;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool bage;
      public bool eage;
      public bool gender;
      public bool type;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObj_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObj_result : TBase
  {
    private List<FaceObj> _success;

    public List<FaceObj> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceObj>();
                  TList _list96 = iprot.ReadListBegin();
                  for( int _i97 = 0; _i97 < _list96.Count; ++_i97)
                  {
                    FaceObj _elem98;
                    _elem98 = new FaceObj();
                    _elem98.Read(iprot);
                    Success.Add(_elem98);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceObj _iter99 in Success)
              {
                _iter99.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjByImg_args : TBase
  {
    private byte[] _image;
    private int _nThreshold;
    private int _nMaxCount;

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool image;
      public bool nThreshold;
      public bool nMaxCount;
    }

    public QueryFaceObjByImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Image = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjByImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Image);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjByImg_args(");
      bool __first = true;
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjByImg_result : TBase
  {
    private List<FaceObj> _success;

    public List<FaceObj> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryFaceObjByImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceObj>();
                  TList _list100 = iprot.ReadListBegin();
                  for( int _i101 = 0; _i101 < _list100.Count; ++_i101)
                  {
                    FaceObj _elem102;
                    _elem102 = new FaceObj();
                    _elem102.Read(iprot);
                    Success.Add(_elem102);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjByImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceObj _iter103 in Success)
              {
                _iter103.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjByImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjTotalCount_args : TBase
  {
    private string _id;
    private string _name;
    private int _bage;
    private int _eage;
    private int _gender;
    private int _type;
    private long _btime;
    private long _etime;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool bage;
      public bool eage;
      public bool gender;
      public bool type;
      public bool btime;
      public bool etime;
    }

    public QueryFaceObjTotalCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjTotalCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjTotalCount_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjTotalCount_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryFaceObjTotalCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjTotalCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjTotalCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObj_args : TBase
  {
    private FaceObj _obj;

    public FaceObj Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool obj;
    }

    public AddFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Obj = new FaceObj();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObj_args(");
      bool __first = true;
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObj_result : TBase
  {
    private List<ErrorInfo> _success;

    public List<ErrorInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ErrorInfo>();
                  TList _list104 = iprot.ReadListBegin();
                  for( int _i105 = 0; _i105 < _list104.Count; ++_i105)
                  {
                    ErrorInfo _elem106;
                    _elem106 = new ErrorInfo();
                    _elem106.Read(iprot);
                    Success.Add(_elem106);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ErrorInfo _iter107 in Success)
              {
                _iter107.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObj_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public DelFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObj_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObj_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObj_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyFaceObj_args : TBase
  {
    private string _id;
    private FaceObj _obj;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public FaceObj Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool obj;
    }

    public ModifyFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Obj = new FaceObj();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyFaceObj_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyFaceObj_result : TBase
  {
    private List<ErrorInfo> _success;

    public List<ErrorInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModifyFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ErrorInfo>();
                  TList _list108 = iprot.ReadListBegin();
                  for( int _i109 = 0; _i109 < _list108.Count; ++_i109)
                  {
                    ErrorInfo _elem110;
                    _elem110 = new ErrorInfo();
                    _elem110.Read(iprot);
                    Success.Add(_elem110);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ErrorInfo _iter111 in Success)
              {
                _iter111.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyFaceObj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefGender_args : TBase
  {

    public QueryDefGender_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefGender_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefGender_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefGender_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefGender_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list112 = iprot.ReadListBegin();
                  for( int _i113 = 0; _i113 < _list112.Count; ++_i113)
                  {
                    string _elem114;
                    _elem114 = iprot.ReadString();
                    Success.Add(_elem114);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefGender_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter115 in Success)
              {
                oprot.WriteString(_iter115);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefGender_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefFaceObjType_args : TBase
  {

    public QueryDefFaceObjType_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefFaceObjType_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefFaceObjType_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefFaceObjType_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefFaceObjType_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list116 = iprot.ReadListBegin();
                  for( int _i117 = 0; _i117 < _list116.Count; ++_i117)
                  {
                    string _elem118;
                    _elem118 = iprot.ReadString();
                    Success.Add(_elem118);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefFaceObjType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter119 in Success)
              {
                oprot.WriteString(_iter119);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefFaceObjType_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefChannelType_args : TBase
  {

    public QueryDefChannelType_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefChannelType_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefChannelType_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefChannelType_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefChannelType_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list120 = iprot.ReadListBegin();
                  for( int _i121 = 0; _i121 < _list120.Count; ++_i121)
                  {
                    string _elem122;
                    _elem122 = iprot.ReadString();
                    Success.Add(_elem122);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefChannelType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter123 in Success)
              {
                oprot.WriteString(_iter123);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefChannelType_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefCameraType_args : TBase
  {

    public QueryDefCameraType_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefCameraType_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefCameraType_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefCameraType_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefCameraType_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list124 = iprot.ReadListBegin();
                  for( int _i125 = 0; _i125 < _list124.Count; ++_i125)
                  {
                    string _elem126;
                    _elem126 = iprot.ReadString();
                    Success.Add(_elem126);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefCameraType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter127 in Success)
              {
                oprot.WriteString(_iter127);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefCameraType_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddZone_args : TBase
  {
    private ZoneCfg _cfg;

    public ZoneCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ZoneCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddZone_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddZone_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddZone_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelZone_args : TBase
  {
    private string _div_index;

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_index;
    }

    public DelZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelZone_args(");
      bool __first = true;
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelZone_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelZone_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModZone_args : TBase
  {
    private ZoneCfg _cfg;

    public ZoneCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ZoneCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModZone_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModZone_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModZone_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryZone_args : TBase
  {
    private string _div_index;

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_index;
    }

    public QueryZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryZone_args(");
      bool __first = true;
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryZone_result : TBase
  {
    private ZoneCfg _success;

    public ZoneCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ZoneCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryZone_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListZoneNum_args : TBase
  {
    private string _div_name;
    private string _div_parent;
    private string _div_order;

    public string Div_name
    {
      get
      {
        return _div_name;
      }
      set
      {
        __isset.div_name = true;
        this._div_name = value;
      }
    }

    public string Div_parent
    {
      get
      {
        return _div_parent;
      }
      set
      {
        __isset.div_parent = true;
        this._div_parent = value;
      }
    }

    public string Div_order
    {
      get
      {
        return _div_order;
      }
      set
      {
        __isset.div_order = true;
        this._div_order = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_name;
      public bool div_parent;
      public bool div_order;
    }

    public QueryListZoneNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Div_parent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Div_order = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListZoneNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_name != null && __isset.div_name) {
          field.Name = "div_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_name);
          oprot.WriteFieldEnd();
        }
        if (Div_parent != null && __isset.div_parent) {
          field.Name = "div_parent";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_parent);
          oprot.WriteFieldEnd();
        }
        if (Div_order != null && __isset.div_order) {
          field.Name = "div_order";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_order);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListZoneNum_args(");
      bool __first = true;
      if (Div_name != null && __isset.div_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_name: ");
        __sb.Append(Div_name);
      }
      if (Div_parent != null && __isset.div_parent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_parent: ");
        __sb.Append(Div_parent);
      }
      if (Div_order != null && __isset.div_order) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_order: ");
        __sb.Append(Div_order);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListZoneNum_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListZoneNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListZoneNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListZoneNum_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListZone_args : TBase
  {
    private string _div_name;
    private string _div_parent;
    private string _div_order;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Div_name
    {
      get
      {
        return _div_name;
      }
      set
      {
        __isset.div_name = true;
        this._div_name = value;
      }
    }

    public string Div_parent
    {
      get
      {
        return _div_parent;
      }
      set
      {
        __isset.div_parent = true;
        this._div_parent = value;
      }
    }

    public string Div_order
    {
      get
      {
        return _div_order;
      }
      set
      {
        __isset.div_order = true;
        this._div_order = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_name;
      public bool div_parent;
      public bool div_order;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryListZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Div_parent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Div_order = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_name != null && __isset.div_name) {
          field.Name = "div_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_name);
          oprot.WriteFieldEnd();
        }
        if (Div_parent != null && __isset.div_parent) {
          field.Name = "div_parent";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_parent);
          oprot.WriteFieldEnd();
        }
        if (Div_order != null && __isset.div_order) {
          field.Name = "div_order";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_order);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListZone_args(");
      bool __first = true;
      if (Div_name != null && __isset.div_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_name: ");
        __sb.Append(Div_name);
      }
      if (Div_parent != null && __isset.div_parent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_parent: ");
        __sb.Append(Div_parent);
      }
      if (Div_order != null && __isset.div_order) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_order: ");
        __sb.Append(Div_order);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListZone_result : TBase
  {
    private List<ZoneCfg> _success;

    public List<ZoneCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ZoneCfg>();
                  TList _list128 = iprot.ReadListBegin();
                  for( int _i129 = 0; _i129 < _list128.Count; ++_i129)
                  {
                    ZoneCfg _elem130;
                    _elem130 = new ZoneCfg();
                    _elem130.Read(iprot);
                    Success.Add(_elem130);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ZoneCfg _iter131 in Success)
              {
                _iter131.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListZone_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddUser_args : TBase
  {
    private UserCfg _cfg;

    public UserCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new UserCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddUser_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddUser_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddUser_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelUser_args : TBase
  {
    private string _uid;
    private string _loginuid;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Loginuid
    {
      get
      {
        return _loginuid;
      }
      set
      {
        __isset.loginuid = true;
        this._loginuid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool loginuid;
    }

    public DelUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Loginuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Loginuid != null && __isset.loginuid) {
          field.Name = "loginuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Loginuid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelUser_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Loginuid != null && __isset.loginuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Loginuid: ");
        __sb.Append(Loginuid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelUser_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelUser_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModUser_args : TBase
  {
    private UserCfg _cfg;

    public UserCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new UserCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModUser_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModUser_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModUser_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryUser_args : TBase
  {
    private string _uid;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
    }

    public QueryUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryUser_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryUser_result : TBase
  {
    private UserCfg _success;

    public UserCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryUser_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListUserNum_args : TBase
  {
    private string _uname;
    private string _utype;
    private string _div_index;

    public string Uname
    {
      get
      {
        return _uname;
      }
      set
      {
        __isset.uname = true;
        this._uname = value;
      }
    }

    public string Utype
    {
      get
      {
        return _utype;
      }
      set
      {
        __isset.utype = true;
        this._utype = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uname;
      public bool utype;
      public bool div_index;
    }

    public QueryListUserNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Utype = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListUserNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uname != null && __isset.uname) {
          field.Name = "uname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uname);
          oprot.WriteFieldEnd();
        }
        if (Utype != null && __isset.utype) {
          field.Name = "utype";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Utype);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListUserNum_args(");
      bool __first = true;
      if (Uname != null && __isset.uname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uname: ");
        __sb.Append(Uname);
      }
      if (Utype != null && __isset.utype) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Utype: ");
        __sb.Append(Utype);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListUserNum_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListUserNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListUserNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListUserNum_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListUser_args : TBase
  {
    private string _uname;
    private string _utype;
    private string _div_index;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Uname
    {
      get
      {
        return _uname;
      }
      set
      {
        __isset.uname = true;
        this._uname = value;
      }
    }

    public string Utype
    {
      get
      {
        return _utype;
      }
      set
      {
        __isset.utype = true;
        this._utype = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uname;
      public bool utype;
      public bool div_index;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryListUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Utype = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uname != null && __isset.uname) {
          field.Name = "uname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uname);
          oprot.WriteFieldEnd();
        }
        if (Utype != null && __isset.utype) {
          field.Name = "utype";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Utype);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListUser_args(");
      bool __first = true;
      if (Uname != null && __isset.uname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uname: ");
        __sb.Append(Uname);
      }
      if (Utype != null && __isset.utype) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Utype: ");
        __sb.Append(Utype);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListUser_result : TBase
  {
    private List<UserCfg> _success;

    public List<UserCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserCfg>();
                  TList _list132 = iprot.ReadListBegin();
                  for( int _i133 = 0; _i133 < _list132.Count; ++_i133)
                  {
                    UserCfg _elem134;
                    _elem134 = new UserCfg();
                    _elem134.Read(iprot);
                    Success.Add(_elem134);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserCfg _iter135 in Success)
              {
                _iter135.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListUser_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RecoveryPermission_args : TBase
  {
    private string _uid;
    private List<ResourceCfg> _cfg;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public List<ResourceCfg> Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool cfg;
    }

    public RecoveryPermission_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cfg = new List<ResourceCfg>();
                  TList _list136 = iprot.ReadListBegin();
                  for( int _i137 = 0; _i137 < _list136.Count; ++_i137)
                  {
                    ResourceCfg _elem138;
                    _elem138 = new ResourceCfg();
                    _elem138.Read(iprot);
                    Cfg.Add(_elem138);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RecoveryPermission_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cfg.Count));
            foreach (ResourceCfg _iter139 in Cfg)
            {
              _iter139.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RecoveryPermission_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RecoveryPermission_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public RecoveryPermission_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RecoveryPermission_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RecoveryPermission_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListRecoPermis_args : TBase
  {
    private string _uid;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
    }

    public QueryListRecoPermis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListRecoPermis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListRecoPermis_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListRecoPermis_result : TBase
  {
    private List<ResourceCfg> _success;

    public List<ResourceCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListRecoPermis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ResourceCfg>();
                  TList _list140 = iprot.ReadListBegin();
                  for( int _i141 = 0; _i141 < _list140.Count; ++_i141)
                  {
                    ResourceCfg _elem142;
                    _elem142 = new ResourceCfg();
                    _elem142.Read(iprot);
                    Success.Add(_elem142);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListRecoPermis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ResourceCfg _iter143 in Success)
              {
                _iter143.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListRecoPermis_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserLogin_args : TBase
  {
    private string _uid;
    private string _upwd;
    private string _wid;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Upwd
    {
      get
      {
        return _upwd;
      }
      set
      {
        __isset.upwd = true;
        this._upwd = value;
      }
    }

    public string Wid
    {
      get
      {
        return _wid;
      }
      set
      {
        __isset.wid = true;
        this._wid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool upwd;
      public bool wid;
    }

    public UserLogin_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Upwd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Wid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserLogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Upwd != null && __isset.upwd) {
          field.Name = "upwd";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Upwd);
          oprot.WriteFieldEnd();
        }
        if (Wid != null && __isset.wid) {
          field.Name = "wid";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserLogin_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Upwd != null && __isset.upwd) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Upwd: ");
        __sb.Append(Upwd);
      }
      if (Wid != null && __isset.wid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wid: ");
        __sb.Append(Wid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserLogin_result : TBase
  {
    private UserCfg _success;

    public UserCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UserLogin_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserLogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserLogin_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserLoginOff_args : TBase
  {
    private string _uid;
    private string _div_index;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool div_index;
    }

    public UserLoginOff_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserLoginOff_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserLoginOff_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserLoginOff_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UserLoginOff_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserLoginOff_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserLoginOff_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddTmpGroup_args : TBase
  {
    private TmpGroupCfg _cfg;

    public TmpGroupCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddTmpGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new TmpGroupCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddTmpGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddTmpGroup_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddTmpGroup_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddTmpGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddTmpGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddTmpGroup_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelTmpGroup_args : TBase
  {
    private string _tmpgid;

    public string Tmpgid
    {
      get
      {
        return _tmpgid;
      }
      set
      {
        __isset.tmpgid = true;
        this._tmpgid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tmpgid;
    }

    public DelTmpGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Tmpgid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelTmpGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tmpgid != null && __isset.tmpgid) {
          field.Name = "tmpgid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tmpgid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelTmpGroup_args(");
      bool __first = true;
      if (Tmpgid != null && __isset.tmpgid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tmpgid: ");
        __sb.Append(Tmpgid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelTmpGroup_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelTmpGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelTmpGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelTmpGroup_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModTmpGroup_args : TBase
  {
    private TmpGroupCfg _cfg;

    public TmpGroupCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModTmpGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new TmpGroupCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModTmpGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModTmpGroup_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModTmpGroup_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModTmpGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModTmpGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModTmpGroup_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTmpGroup_args : TBase
  {
    private string _tmpgid;

    public string Tmpgid
    {
      get
      {
        return _tmpgid;
      }
      set
      {
        __isset.tmpgid = true;
        this._tmpgid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tmpgid;
    }

    public QueryTmpGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Tmpgid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryTmpGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tmpgid != null && __isset.tmpgid) {
          field.Name = "tmpgid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tmpgid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTmpGroup_args(");
      bool __first = true;
      if (Tmpgid != null && __isset.tmpgid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tmpgid: ");
        __sb.Append(Tmpgid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTmpGroup_result : TBase
  {
    private TmpGroupCfg _success;

    public TmpGroupCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryTmpGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TmpGroupCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryTmpGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTmpGroup_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListTmpGroupNum_args : TBase
  {
    private string _uid;
    private string _tmpgname;
    private string _rtype;
    private string _resid;
    private string _pid;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Tmpgname
    {
      get
      {
        return _tmpgname;
      }
      set
      {
        __isset.tmpgname = true;
        this._tmpgname = value;
      }
    }

    public string Rtype
    {
      get
      {
        return _rtype;
      }
      set
      {
        __isset.rtype = true;
        this._rtype = value;
      }
    }

    public string Resid
    {
      get
      {
        return _resid;
      }
      set
      {
        __isset.resid = true;
        this._resid = value;
      }
    }

    public string Pid
    {
      get
      {
        return _pid;
      }
      set
      {
        __isset.pid = true;
        this._pid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool tmpgname;
      public bool rtype;
      public bool resid;
      public bool pid;
    }

    public QueryListTmpGroupNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tmpgname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Rtype = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Resid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Pid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListTmpGroupNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Tmpgname != null && __isset.tmpgname) {
          field.Name = "tmpgname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tmpgname);
          oprot.WriteFieldEnd();
        }
        if (Rtype != null && __isset.rtype) {
          field.Name = "rtype";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Rtype);
          oprot.WriteFieldEnd();
        }
        if (Resid != null && __isset.resid) {
          field.Name = "resid";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Resid);
          oprot.WriteFieldEnd();
        }
        if (Pid != null && __isset.pid) {
          field.Name = "pid";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Pid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListTmpGroupNum_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Tmpgname != null && __isset.tmpgname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tmpgname: ");
        __sb.Append(Tmpgname);
      }
      if (Rtype != null && __isset.rtype) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rtype: ");
        __sb.Append(Rtype);
      }
      if (Resid != null && __isset.resid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Resid: ");
        __sb.Append(Resid);
      }
      if (Pid != null && __isset.pid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pid: ");
        __sb.Append(Pid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListTmpGroupNum_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListTmpGroupNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListTmpGroupNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListTmpGroupNum_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListTmpGroup_args : TBase
  {
    private string _uid;
    private string _tmpgname;
    private string _rtype;
    private string _resid;
    private string _pid;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Tmpgname
    {
      get
      {
        return _tmpgname;
      }
      set
      {
        __isset.tmpgname = true;
        this._tmpgname = value;
      }
    }

    public string Rtype
    {
      get
      {
        return _rtype;
      }
      set
      {
        __isset.rtype = true;
        this._rtype = value;
      }
    }

    public string Resid
    {
      get
      {
        return _resid;
      }
      set
      {
        __isset.resid = true;
        this._resid = value;
      }
    }

    public string Pid
    {
      get
      {
        return _pid;
      }
      set
      {
        __isset.pid = true;
        this._pid = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool tmpgname;
      public bool rtype;
      public bool resid;
      public bool pid;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryListTmpGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tmpgname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Rtype = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Resid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Pid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListTmpGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Tmpgname != null && __isset.tmpgname) {
          field.Name = "tmpgname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tmpgname);
          oprot.WriteFieldEnd();
        }
        if (Rtype != null && __isset.rtype) {
          field.Name = "rtype";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Rtype);
          oprot.WriteFieldEnd();
        }
        if (Resid != null && __isset.resid) {
          field.Name = "resid";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Resid);
          oprot.WriteFieldEnd();
        }
        if (Pid != null && __isset.pid) {
          field.Name = "pid";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListTmpGroup_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Tmpgname != null && __isset.tmpgname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tmpgname: ");
        __sb.Append(Tmpgname);
      }
      if (Rtype != null && __isset.rtype) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rtype: ");
        __sb.Append(Rtype);
      }
      if (Resid != null && __isset.resid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Resid: ");
        __sb.Append(Resid);
      }
      if (Pid != null && __isset.pid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pid: ");
        __sb.Append(Pid);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListTmpGroup_result : TBase
  {
    private List<TmpGroupCfg> _success;

    public List<TmpGroupCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListTmpGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TmpGroupCfg>();
                  TList _list144 = iprot.ReadListBegin();
                  for( int _i145 = 0; _i145 < _list144.Count; ++_i145)
                  {
                    TmpGroupCfg _elem146;
                    _elem146 = new TmpGroupCfg();
                    _elem146.Read(iprot);
                    Success.Add(_elem146);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListTmpGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TmpGroupCfg _iter147 in Success)
              {
                _iter147.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListTmpGroup_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HearBeat_args : TBase
  {
    private string _div_index;
    private string _uid;

    public string Div_index
    {
      get
      {
        return _div_index;
      }
      set
      {
        __isset.div_index = true;
        this._div_index = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool div_index;
      public bool uid;
    }

    public HearBeat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Div_index = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HearBeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Div_index != null && __isset.div_index) {
          field.Name = "div_index";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Div_index);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HearBeat_args(");
      bool __first = true;
      if (Div_index != null && __isset.div_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Div_index: ");
        __sb.Append(Div_index);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HearBeat_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public HearBeat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HearBeat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HearBeat_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GrantAuth_args : TBase
  {
    private string _uid;
    private List<AuthCfg> _cfg;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public List<AuthCfg> Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool cfg;
    }

    public GrantAuth_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cfg = new List<AuthCfg>();
                  TList _list148 = iprot.ReadListBegin();
                  for( int _i149 = 0; _i149 < _list148.Count; ++_i149)
                  {
                    AuthCfg _elem150;
                    _elem150 = new AuthCfg();
                    _elem150.Read(iprot);
                    Cfg.Add(_elem150);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GrantAuth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cfg.Count));
            foreach (AuthCfg _iter151 in Cfg)
            {
              _iter151.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GrantAuth_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GrantAuth_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GrantAuth_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GrantAuth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GrantAuth_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RevokeAuth_args : TBase
  {
    private string _uid;
    private List<AuthCfg> _cfg;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public List<AuthCfg> Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool cfg;
    }

    public RevokeAuth_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cfg = new List<AuthCfg>();
                  TList _list152 = iprot.ReadListBegin();
                  for( int _i153 = 0; _i153 < _list152.Count; ++_i153)
                  {
                    AuthCfg _elem154;
                    _elem154 = new AuthCfg();
                    _elem154.Read(iprot);
                    Cfg.Add(_elem154);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RevokeAuth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cfg.Count));
            foreach (AuthCfg _iter155 in Cfg)
            {
              _iter155.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RevokeAuth_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RevokeAuth_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public RevokeAuth_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RevokeAuth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RevokeAuth_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListAuth_args : TBase
  {
    private string _uid;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
    }

    public QueryListAuth_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListAuth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListAuth_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListAuth_result : TBase
  {
    private List<AuthCfg> _success;

    public List<AuthCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListAuth_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<AuthCfg>();
                  TList _list156 = iprot.ReadListBegin();
                  for( int _i157 = 0; _i157 < _list156.Count; ++_i157)
                  {
                    AuthCfg _elem158;
                    _elem158 = new AuthCfg();
                    _elem158.Read(iprot);
                    Success.Add(_elem158);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListAuth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (AuthCfg _iter159 in Success)
              {
                _iter159.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListAuth_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ClientRegion_args : TBase
  {
    private ClientCfg _cfg;

    public ClientCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ClientRegion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ClientCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ClientRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ClientRegion_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ClientRegion_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ClientRegion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ClientRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ClientRegion_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorRegion_args : TBase
  {
    private VisitorInfo _cfg;

    public VisitorInfo Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public VisitorRegion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new VisitorInfo();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorRegion_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorRegion_result : TBase
  {
    private CResultCfg _success;

    public CResultCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public VisitorRegion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CResultCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorRegion_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadCmpLogFromFront_args : TBase
  {
    private CmpFaceLogInfo _cfg;

    public CmpFaceLogInfo Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public UploadCmpLogFromFront_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new CmpFaceLogInfo();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadCmpLogFromFront_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadCmpLogFromFront_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadCmpLogFromFront_result : TBase
  {
    private ErrorInfo _success;

    public ErrorInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UploadCmpLogFromFront_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ErrorInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadCmpLogFromFront_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadCmpLogFromFront_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifi_args : TBase
  {
    private List<string> _img;
    private string _channelID;
    private string _channelname;

    public List<string> Img
    {
      get
      {
        return _img;
      }
      set
      {
        __isset.img = true;
        this._img = value;
      }
    }

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }

    public string Channelname
    {
      get
      {
        return _channelname;
      }
      set
      {
        __isset.channelname = true;
        this._channelname = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool img;
      public bool channelID;
      public bool channelname;
    }

    public VisitorVerifi_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Img = new List<string>();
                  TList _list160 = iprot.ReadListBegin();
                  for( int _i161 = 0; _i161 < _list160.Count; ++_i161)
                  {
                    string _elem162;
                    _elem162 = iprot.ReadString();
                    Img.Add(_elem162);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Channelname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifi_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Img != null && __isset.img) {
          field.Name = "img";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Img.Count));
            foreach (string _iter163 in Img)
            {
              oprot.WriteString(_iter163);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (Channelname != null && __isset.channelname) {
          field.Name = "channelname";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channelname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifi_args(");
      bool __first = true;
      if (Img != null && __isset.img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (Channelname != null && __isset.channelname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channelname: ");
        __sb.Append(Channelname);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifi_result : TBase
  {
    private List<CResultCfg> _success;

    public List<CResultCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public VisitorVerifi_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CResultCfg>();
                  TList _list164 = iprot.ReadListBegin();
                  for( int _i165 = 0; _i165 < _list164.Count; ++_i165)
                  {
                    CResultCfg _elem166;
                    _elem166 = new CResultCfg();
                    _elem166.Read(iprot);
                    Success.Add(_elem166);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifi_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CResultCfg _iter167 in Success)
              {
                _iter167.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifi_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
