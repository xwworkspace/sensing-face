using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SING.Data.BaseTools;
using SING.Data.Data;
using Thrift.Protocol;
using Thrift.Transport;

namespace SING.Data.ScheduleProcess
{
    public class ScheduleGet
    {
        public static bool Login(string host, string port)
        {
            //生成socket套接字；
            TSocket tsocket = new TSocket(host, int.Parse(port.Trim()));
            //设置连接超时为100；
            tsocket.Timeout = 100;
            //生成客户端对象
            TTransport transport = tsocket;
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServer.Client _BusinessServerClient = new BusinessServer.Client(protocol);
            //连接服务器
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                Logger.Logger.Error("连接服务器错误", ex);
                return false;
            }
            //关闭连接
            transport.Close();
            return true;
        }

        public static string ValidtionUser(string host, string port, string UserName, string PassWord, string wid)
        {
            TSocket tsocket = new TSocket(host, int.Parse(port.Trim()));
            tsocket.Timeout = 5000;
            TTransport transport = tsocket;
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServerNet.Client _BusinessServerClient = new BusinessServerNet.Client(protocol);
            Data.UserCfgData UserCfgData = new Data.UserCfgData();
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                UserCfg _UserCfg = _BusinessServerClient.UserLogin(UserName, PassWord, wid);
                if (_UserCfg != null)
                {
                    UserCfgData = UserCfgData.ConvertToData(_UserCfg);

                    return string.Format("UID={0};UTYPE={1};DIVINDEX={2};DIVORDER={3}", UserCfgData.Uid, UserCfgData.Utype, UserCfgData.Div_index, UserCfgData.Div_order);
                }
                transport.Close();

                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                System.Windows.MessageBox.Show("连接服务器失败");
                Logger.Logger.Error("连接服务器失败", ex);
            }
            return string.Empty;
        }

        /// <summary>
        /// 查询用户
        /// </summary>
        /// <param name="UserName"></param>
        /// <returns></returns>
        public static UserCfgData QueryUser(string UserName)
        {
            TSocket tsocket = new TSocket(AppConfig.Instance.LoginHost, AppConfig.Instance.Port);
            tsocket.Timeout = 100;
            TTransport transport = tsocket;
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServerNet.Client _BusinessServerClient = new BusinessServerNet.Client(protocol);
            UserCfgData _UserCfgData = new UserCfgData();
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                try
                {
                    UserCfg _UserCfg = _BusinessServerClient.QueryUser(UserName);
                    _UserCfgData = UserCfgData.ConvertToData(_UserCfg);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("获取用户信息失败");
                    Logger.Logger.Error("获取用户信息失败", ex);
                }
                transport.Close();
                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                System.Windows.MessageBox.Show("连接服务器失败");
                Logger.Logger.Error("连接服务器失败", ex);
            }
            return _UserCfgData;
        }

        public static List<ChannelCfgData> QueryAllChannel()
        {
            List<ChannelCfgData> ListChannelCfgData = new List<ChannelCfgData>();
            List<ChannelCfg> ListChannelCfg = new List<ChannelCfg>();
            TTransport transport = new TSocket(AppConfig.Instance.LoginHost, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServer.Client _BusinessServerClient = new BusinessServer.Client(protocol);

            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                ListChannelCfg = _BusinessServerClient.QueryAllChannel();
                transport.Close();
                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                System.Windows.MessageBox.Show("连接服务器失败");
                Logger.Logger.Error("连接服务器失败", ex);
            }
            if (ListChannelCfg == null) return ListChannelCfgData;
            foreach (ChannelCfg cc in ListChannelCfg)
            {
                ListChannelCfgData.Add(ChannelCfgData.ConvertToData(cc));
            }

            return ListChannelCfgData;
        }

        /// <summary>
        /// 查询当前的域值
        /// </summary>
        /// <returns></returns>
        public static int QueryThreshold()
        {
            TTransport transport = new TSocket(AppConfig.Instance.LoginHost, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServer.Client _BusinessServerClient = new BusinessServer.Client(protocol);
            int nSucess = -1;
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                nSucess = _BusinessServerClient.QueryThreshold();
                transport.Close();
                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                //System.Windows.MessageBox.Show("查询域值失败，稍后重试！");
                Logger.Logger.Error("查询阈值方法异常：QueryThreshold", ex);
            }
            return nSucess;
        }

        /// <summary>
        /// 查询人脸对象类型定义
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static List<STypeInfoData> QueryDefFaceObjTypeH(int id)
        {
            TTransport transport = new TSocket(AppConfig.Instance.LoginHost, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServer.Client _BusinessServerClient = new BusinessServer.Client(protocol);
            List<STypeInfoData> listStypeInfoData = new List<STypeInfoData>();
            List<STypeInfo> listStypeInfo = new List<STypeInfo>();
            try
            {
                #region
                //打开连接
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                listStypeInfo = _BusinessServerClient.QueryDefFaceObjTypeH(id);
                transport.Close();
                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                Logger.Logger.Error("查询人脸对象类型定义异常：QueryDefFaceObjTypeH", ex);
            }
            if (listStypeInfo == null) return listStypeInfoData;
            foreach (STypeInfo info in listStypeInfo)
            {
                listStypeInfoData.Add(STypeInfoData.ConvertToData(info));
            }
            return listStypeInfoData;
        }

        /// <summary>
        /// 查询域
        /// </summary>
        /// <param name="div_index"></param>
        /// <returns></returns>
        public static ZoneCfgViewData QueryZone(string div_index)
        {
            TTransport transport = new TSocket(AppConfig.Instance.LoginHost, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServerNet.Client _BusinessServerClient = new BusinessServerNet.Client(protocol);
            ZoneCfgViewData _ZoneCfgData = null;
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                ZoneCfg _ZoneCfg = _BusinessServerClient.QueryZone(div_index);
                if(_ZoneCfg != null)
                {
                    _ZoneCfgData = ZoneCfgViewData.ConvertToViewData(_ZoneCfg);
                }
                transport.Close();
                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                Logger.Logger.Error("查询用户域异常：QueryZone", ex);
            }
            return _ZoneCfgData;
        }

        /// <summary>
        /// 查询子域
        /// </summary>
        /// <param name="div_name"></param>
        /// <param name="div_parent"></param>
        /// <param name="div_order"></param>
        /// <param name="nPageFirstNum"></param>
        /// <param name="nPageNum"></param>
        /// <returns></returns>
        public static List<ZoneCfgViewData> QueryListZone(string div_name, string div_parent, string div_order, int nPageFirstNum, int nPageNum)
        {
            TTransport transport = new TSocket(AppConfig.Instance.LoginHost, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServerNet.Client _BusinessServerClient = new BusinessServerNet.Client(protocol);
            List<ZoneCfgViewData> _ListZoneCfgViewData = new List<ZoneCfgViewData>();
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                List<ZoneCfg> _ListZoneCfg = _BusinessServerClient.QueryListZone(div_name, div_parent, div_order, nPageFirstNum, nPageNum);

                if (_ListZoneCfg != null && _ListZoneCfg.Count > 0)
                {
                    foreach (ZoneCfg zone in _ListZoneCfg)
                    {
                        _ListZoneCfgViewData.Add(ZoneCfgViewData.ConvertToViewData(zone));
                    }
                }
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                #endregion
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                Logger.Logger.Error("查询用户子域异常：QueryListZone", ex);
            }
            return _ListZoneCfgViewData;
        }

        /// <summary>
        /// 获取域下所有通道
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public static List<ChannelCfgData> QueryAllChannel(string index)
        {
            TTransport transport = new TSocket(AppConfig.Instance.LoginHost, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServerNet.Client _BusinessServerClient = new BusinessServerNet.Client(protocol);
            List<ChannelCfgData> ListChannelCfgData = new List<ChannelCfgData>();
            try
            {
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                List<ChannelCfg> ListChannelCfg = _BusinessServerClient.QueryAllChannel(index);

                if (ListChannelCfg != null && ListChannelCfg.Count > 0)
                {
                    for (int i = 0; i < ListChannelCfg.Count; i++)
                    {
                        ListChannelCfgData.Add(ChannelCfgData.ConvertToData(ListChannelCfg[i]));
                    }
                }

                transport.Close();
            }
            catch (Exception ex)
            {
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                Logger.Logger.Error("获取用户域所有通道异常：QueryAllChannel", ex);      
            }
            return ListChannelCfgData;
        }
    }
}
