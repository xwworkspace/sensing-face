
using FACE_ChannelManagement.Models;
using Microsoft.Practices.Prism.ViewModel;
using SING.Data.Controls.ActiveXControl.DZVideoActiveX;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms.Integration;
using System.Windows.Media;
using System.Windows.Resources;

namespace FACE_ChannelManagement.ViewModels
{
    /// <summary>
    /// UtilitiesViewModel
    /// 
    /// 因为mef导致有些功能无法使用，暂时提供该解决方案
    /// </summary>
    public partial class ViewModel : NotificationObject
    {

        #region Camera Screen Channel 
        /**
         * 通道影像播放的问题均来自这里
         * 
         * **/

        /// <summary>
        /// 
        /// </summary>
        private Action IniWindowsFormsHostlist()
        {
            Action act = () =>
            {
                WfhList = new List<WindowsFormsHost>();
                WindowsFormsHost wfh = new WindowsFormsHost();
                wfh.Tag = null;
                WfhList.Add(wfh);
            };
            return act;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="windowsFormHostList"></param>
        /// <param name="videoPlayerCtrlCom"></param>
        /// <param name="CameraData"></param>
        /// <returns></returns>
        private Action CameraVideoPlayerFunc(List<WindowsFormsHost> windowsFormHostList, AxDZVideoControl videoPlayerCtrlCom, ChannelConfigData CameraData)
        {
            AxDZVideoControl AxVideoControl = CameraPlayerControlComponent<AxDZVideoControl>()(videoPlayerCtrlCom);

            Action act = () =>
            {
                if (WfhList != null && WfhList.Count >= 1)
                {
                    WindowsFormsHost wfh = WfhList[0];
                    if (wfh.Tag == null)
                    {
                        wfh.Child = AxVideoControl;
                        wfh.Tag = Camera.ChannelCfgData.TcChaneelID;

                        Camera.IsOpened = true;
                    }
                }
            };
            return act;
        }


        public Action CloseCameraFunc(List<WindowsFormsHost> windowsFormHostList, ChannelConfigData currentCamera)
        {
            Action close = () =>
            {
                if (currentCamera.IsOpened == true)
                {
                    if (windowsFormHostList is List<WindowsFormsHost> && windowsFormHostList != null && windowsFormHostList.Count >= 0)
                    {
                        WindowsFormsHost wfh = windowsFormHostList[0];
                        if (wfh.Tag != null && wfh.Tag.ToString() == currentCamera.ChannelCfgData.TcChaneelID && wfh.Child != null)
                        {
                            (wfh.Child as AxDZVideoControl).CloseCamera();
                            wfh.Child = null;
                            wfh.Tag = null;

                            currentCamera.IsOpened = false;
                        }
                    }
                }
            };
            return close;
        }


        private Func<T, AxDZVideoControl> CameraPlayerControlComponent<T>() where T : class, new()
        {
            Func<T, AxDZVideoControl> act = (t) =>
             {
                 T AxVideoControl = new T();
                 AxDZVideoControl playerCtrl = AxVideoControl as AxDZVideoControl;
                 playerCtrl.OpenCamera(Camera.ChannelCfgData.CaptureCfgData.NCaptureType,
                                             Camera.ChannelCfgData.CaptureCfgData.TcAddr + "|" +
                                             Camera.ChannelCfgData.TcDescription, (uint)Camera.ChannelCfgData.CaptureCfgData.NPort,
                                             Camera.ChannelCfgData.CaptureCfgData.TcUID, Camera.ChannelCfgData.CaptureCfgData.TcPSW, 1, 1);

                 return playerCtrl;
             };
            return act;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public Action SingleScreen()
        {
            Action act = () =>
            {
                if (VideoPlayerGrid == null) VideoPlayerGrid = new Grid();
                try
                {
                    for (int i = 0; i < VideoPlayerGrid.Children.Count; i++)
                    {
                        ((Grid)VideoPlayerGrid.Children[i]).Children.Clear();
                    }

                    VideoPlayerGrid.Children.Clear();
                    VideoPlayerGrid.RowDefinitions.Clear();
                    VideoPlayerGrid.ColumnDefinitions.Clear();

                    VideoPlayerGrid.RowDefinitions.Add(new RowDefinition());
                    VideoPlayerGrid.ColumnDefinitions.Add(new ColumnDefinition());

                    Grid screenGrid = new Grid();
                    ImageSourceConverter imageSourceConverter = new ImageSourceConverter();
                    StreamResourceInfo streamResourceInfo;
                    string resourceStr = string.Empty;
                    resourceStr = @"pack://application:,,,/FACE;component/Resources/noVideoBackground.png";
                    streamResourceInfo = Application.GetResourceStream(new Uri(resourceStr, UriKind.Absolute));
                    screenGrid.Background = new ImageBrush((ImageSource)imageSourceConverter.ConvertFrom(streamResourceInfo.Stream));

                    screenGrid.Children.Add(WfhList[0]);
                    VideoPlayerGrid.Children.Add(screenGrid);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            };
            return act;
        }

        #endregion

    }


    namespace Toptip
    {
        /// <summary>
        /// Channel
        /// </summary>
        public struct AboutCameraPlayer
        {
            /// <summary>
            /// 摄像机IP为空！
            /// </summary>
            public const string CameraIpIsNull = "摄像机IP为空！";

            /// <summary>
            /// 摄像机无法连接！
            /// </summary>
            public const string CameraOffLink = "摄像机无法连接！";

            /// <summary>
            /// 删除通道成功！
            /// </summary>
            public const string CameraDeletedSuccess = "删除通道成功！";

            /// <summary>
            /// 删除通道失败！
            /// </summary>
            public const string CameraDeletedFail = "删除通道失败！";

            /// <summary>
            /// 窗口Title
            /// 添加通道数据 Camera = Channel
            /// </summary>
            public const string TitleAddCamera = "添加通道数据";

            /// <summary>
            /// 窗口Title
            /// 添加通道数据 Camera = Channel
            /// </summary>
            public const string TitleModifyCamera = "编辑通道数据";

        }
    }
}
