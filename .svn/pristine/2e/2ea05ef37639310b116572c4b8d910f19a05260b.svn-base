/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ZoneCfg : TBase
{
  private string _div_index;
  private string _div_name;
  private string _div_parent;
  private string _div_parents;
  private string _div_order;
  private string _div_orderidx;
  private string _div_memo;

    public string Div_index
  {
    get
    {
      return _div_index;
    }
    set
    {
      __isset.div_index = true;
      this._div_index = value;
    }
  }

  public string Div_name
  {
    get
    {
      return _div_name;
    }
    set
    {
      __isset.div_name = true;
      this._div_name = value;
    }
  }

  public string Div_parent
  {
    get
    {
      return _div_parent;
    }
    set
    {
      __isset.div_parent = true;
      this._div_parent = value;
    }
  }

  public string Div_parents
  {
    get
    {
      return _div_parents;
    }
    set
    {
      __isset.div_parents = true;
      this._div_parents = value;
    }
  }

  public string Div_order
  {
    get
    {
      return _div_order;
    }
    set
    {
      __isset.div_order = true;
      this._div_order = value;
    }
  }

  public string Div_orderidx
  {
    get
    {
      return _div_orderidx;
    }
    set
    {
      __isset.div_orderidx = true;
      this._div_orderidx = value;
    }
  }

  public string Div_memo
  {
    get
    {
      return _div_memo;
    }
    set
    {
      __isset.div_memo = true;
      this._div_memo = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool div_index;
    public bool div_name;
    public bool div_parent;
    public bool div_parents;
    public bool div_order;
    public bool div_orderidx;
    public bool div_memo;
  }

  public ZoneCfg() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Div_index = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Div_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Div_parent = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Div_parents = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Div_order = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Div_orderidx = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Div_memo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ZoneCfg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Div_index != null && __isset.div_index) {
        field.Name = "div_index";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Div_index);
        oprot.WriteFieldEnd();
      }
      if (Div_name != null && __isset.div_name) {
        field.Name = "div_name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Div_name);
        oprot.WriteFieldEnd();
      }
      if (Div_parent != null && __isset.div_parent) {
        field.Name = "div_parent";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Div_parent);
        oprot.WriteFieldEnd();
      }
      if (Div_parents != null && __isset.div_parents) {
        field.Name = "div_parents";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Div_parents);
        oprot.WriteFieldEnd();
      }
      if (Div_order != null && __isset.div_order) {
        field.Name = "div_order";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Div_order);
        oprot.WriteFieldEnd();
      }
      if (Div_orderidx != null && __isset.div_orderidx) {
        field.Name = "div_orderidx";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Div_orderidx);
        oprot.WriteFieldEnd();
      }
      if (Div_memo != null && __isset.div_memo) {
        field.Name = "div_memo";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Div_memo);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ZoneCfg(");
    bool __first = true;
    if (Div_index != null && __isset.div_index) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Div_index: ");
      __sb.Append(Div_index);
    }
    if (Div_name != null && __isset.div_name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Div_name: ");
      __sb.Append(Div_name);
    }
    if (Div_parent != null && __isset.div_parent) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Div_parent: ");
      __sb.Append(Div_parent);
    }
    if (Div_parents != null && __isset.div_parents) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Div_parents: ");
      __sb.Append(Div_parents);
    }
    if (Div_order != null && __isset.div_order) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Div_order: ");
      __sb.Append(Div_order);
    }
    if (Div_orderidx != null && __isset.div_orderidx) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Div_orderidx: ");
      __sb.Append(Div_orderidx);
    }
    if (Div_memo != null && __isset.div_memo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Div_memo: ");
      __sb.Append(Div_memo);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

