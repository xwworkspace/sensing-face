/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CaptureCfg : TBase
{
  private int _nLevel1ID;
  private int _nLevel2ID;
  private int _nCaptureType;
  private int _nPort;
  private string _tcAddr;
  private string _tcUID;
  private string _tcPSW;

  public int NLevel1ID
  {
    get
    {
      return _nLevel1ID;
    }
    set
    {
      __isset.nLevel1ID = true;
      this._nLevel1ID = value;
    }
  }

  public int NLevel2ID
  {
    get
    {
      return _nLevel2ID;
    }
    set
    {
      __isset.nLevel2ID = true;
      this._nLevel2ID = value;
    }
  }

  public int NCaptureType
  {
    get
    {
      return _nCaptureType;
    }
    set
    {
      __isset.nCaptureType = true;
      this._nCaptureType = value;
    }
  }

  public int NPort
  {
    get
    {
      return _nPort;
    }
    set
    {
      __isset.nPort = true;
      this._nPort = value;
    }
  }

  public string TcAddr
  {
    get
    {
      return _tcAddr;
    }
    set
    {
      __isset.tcAddr = true;
      this._tcAddr = value;
    }
  }

  public string TcUID
  {
    get
    {
      return _tcUID;
    }
    set
    {
      __isset.tcUID = true;
      this._tcUID = value;
    }
  }

  public string TcPSW
  {
    get
    {
      return _tcPSW;
    }
    set
    {
      __isset.tcPSW = true;
      this._tcPSW = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool nLevel1ID;
    public bool nLevel2ID;
    public bool nCaptureType;
    public bool nPort;
    public bool tcAddr;
    public bool tcUID;
    public bool tcPSW;
  }

  public CaptureCfg() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              NLevel1ID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              NLevel2ID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              NCaptureType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NPort = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              TcAddr = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              TcUID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              TcPSW = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CaptureCfg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.nLevel1ID) {
        field.Name = "nLevel1ID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NLevel1ID);
        oprot.WriteFieldEnd();
      }
      if (__isset.nLevel2ID) {
        field.Name = "nLevel2ID";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NLevel2ID);
        oprot.WriteFieldEnd();
      }
      if (__isset.nCaptureType) {
        field.Name = "nCaptureType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NCaptureType);
        oprot.WriteFieldEnd();
      }
      if (__isset.nPort) {
        field.Name = "nPort";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NPort);
        oprot.WriteFieldEnd();
      }
      if (TcAddr != null && __isset.tcAddr) {
        field.Name = "tcAddr";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcAddr);
        oprot.WriteFieldEnd();
      }
      if (TcUID != null && __isset.tcUID) {
        field.Name = "tcUID";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcUID);
        oprot.WriteFieldEnd();
      }
      if (TcPSW != null && __isset.tcPSW) {
        field.Name = "tcPSW";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcPSW);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CaptureCfg(");
    bool __first = true;
    if (__isset.nLevel1ID) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NLevel1ID: ");
      __sb.Append(NLevel1ID);
    }
    if (__isset.nLevel2ID) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NLevel2ID: ");
      __sb.Append(NLevel2ID);
    }
    if (__isset.nCaptureType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NCaptureType: ");
      __sb.Append(NCaptureType);
    }
    if (__isset.nPort) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NPort: ");
      __sb.Append(NPort);
    }
    if (TcAddr != null && __isset.tcAddr) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TcAddr: ");
      __sb.Append(TcAddr);
    }
    if (TcUID != null && __isset.tcUID) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TcUID: ");
      __sb.Append(TcUID);
    }
    if (TcPSW != null && __isset.tcPSW) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TcPSW: ");
      __sb.Append(TcPSW);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

