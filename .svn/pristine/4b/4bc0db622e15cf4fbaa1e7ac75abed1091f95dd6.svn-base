using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.ServiceLocation;
using SING.Data.BaseTools;
using SING.Data.Data;
using Thrift.Server;
using Thrift.Transport;

namespace SING.Data.ScheduleProcess
{

    public partial class ScheduleUIServer
    {
        private static TThreadPoolServer server;

        public static void ServiceProcessor()
        {
            FaceServer _FaceServer = new FaceServer();
            TServerSocket serverTransport = new TServerSocket(AppConfig.Instance.StartPortInt, 0, false);
            UIServer.Processor processor = new UIServer.Processor(_FaceServer);
            server = new TThreadPoolServer(processor, serverTransport);
            server.Serve();
        }
    }

    public class FaceServer : UIServer.Iface
    {
        private CapFaceLogWithImgData _CurrentCapFaceLogWidthImgData;
        private RealtimeCmpInfoViewData _CurrentRealtimeCmpInfoViewData;
        private static IEventAggregator _eventAggregator;
        public int UpdateRealtimeCap(RealtimeCapInfo info, string channelname)
        {
            try
            {
                if (_CurrentCapFaceLogWidthImgData != null) _CurrentCapFaceLogWidthImgData = null;
                _CurrentCapFaceLogWidthImgData = new CapFaceLogWithImgData();

                _CurrentCapFaceLogWidthImgData.ID = info.Id;
                _CurrentCapFaceLogWidthImgData.ChannelID = info.Channel;
                _CurrentCapFaceLogWidthImgData.ChannelName = channelname;

                _CurrentCapFaceLogWidthImgData.Time = info.Time;
                _CurrentCapFaceLogWidthImgData.Img = info.Image;


                _eventAggregator = ServiceLocator.Current.GetInstance<IEventAggregator>();
                _eventAggregator.GetEvent<RealtimeCaptureEvent>().Publish(_CurrentCapFaceLogWidthImgData);
                info = null;
                return 0;
            }
            catch (Exception ex)
            {
                Logger.Logger.Error("UpdateRealtimeCap", ex);
                return -1;
            }
        }

        public int UpdateRealtimeCmp(RealtimeCmpInfo info, string channelname)
        {
            try
            {
                if (_CurrentRealtimeCmpInfoViewData != null) _CurrentRealtimeCmpInfoViewData = null;
                _CurrentRealtimeCmpInfoViewData = new RealtimeCmpInfoViewData();

                if (String.IsNullOrEmpty(info.CapID) || String.IsNullOrEmpty(info.ObjID))
                {
                    Logger.Logger.Info("抓拍照片ID为空");
                }
                _CurrentRealtimeCmpInfoViewData = RealtimeCmpInfoViewData.ConvertToViewData(info);
                _CurrentRealtimeCmpInfoViewData.ChannelName = channelname;

  
                _eventAggregator = ServiceLocator.Current.GetInstance<IEventAggregator>();
                _eventAggregator.GetEvent<RealtimeCmpInfoEvent>().Publish(_CurrentRealtimeCmpInfoViewData);

                info = null;
                return 0;
            }
            catch (Exception ex)
            {
                Logger.Logger.Error("UpdateRealtimeCap", ex);
                return -1;
            }
        }
    }
    public class RealtimeCaptureEvent : CompositePresentationEvent<CapFaceLogWithImgData>
    {
    }
    public class RealtimeCmpInfoEvent : CompositePresentationEvent<RealtimeCmpInfoViewData>
    {
    }
}
