using FACE_ChannelManagement.Models;
using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.ViewModel;
using System.Collections.Generic;
using System.Windows.Forms.Integration;
using System.Windows.Input;
using System;
using System.Windows;

namespace FACE_ChannelManagement.ViewModels
{
    /// <summary>
    /// //ChannelGridViewModel
    /// </summary>
    public partial class ViewModel : NotificationObject
    {
        #region Command
        public ICommand PreviewCameraCommand { get; private set; }
        /// <summary>
        /// 编辑摄像头参数 （即：通道参数信息）
        /// </summary>
        public ICommand EditCameraCommand { get; private set; }
        /// <summary>
        /// 删除摄像头
        /// </summary>
        public ICommand DeleteCameraCommand { get; private set; }
        /// <summary>
        /// 添加摄像头信息
        /// </summary>
        public ICommand AddCameraInfoCommand { get; private set; }
        #endregion //Command


        #region Properties

        Visibility _isViewChannelList = Visibility.Visible;//是否查看通道列表
        Visibility _isEditChannelCameraInfo = Visibility.Collapsed;//是否编辑摄像头信息

        public Visibility IsViewChannelList
        {
            get { return _isViewChannelList; }
            set { _isViewChannelList = value; RaisePropertyChanged("IsViewChannelList"); }
        }

        public Visibility IsEditChannelCameraInfo
        {
            get { return _isEditChannelCameraInfo; }
            set { _isEditChannelCameraInfo = value; RaisePropertyChanged("IsEditChannelCameraInfo"); }
        }

        #endregion //Properties


        public void InitChannelGridViewModel()
        {
            PreviewCameraCommand = new DelegateCommand(PreviewCameraFunc);
            EditCameraCommand = new DelegateCommand<object>(EditCameraFunc);
            DeleteCameraCommand = new DelegateCommand<object>(DeleteCameraFunc);
            AddCameraInfoCommand = new DelegateCommand(AddCameraInfoFunc);
            
            //初始化OCX控件载体
            for (int i = 0; i < 16; i++)
            {
                WindowsFormsHost wfh = new WindowsFormsHost();
                wfh.Tag = null;
                wFHList.Add(wfh);
            }

            //初始化默认分屏



            for (int i = 0; i < 100; i++)
            {
                Cameras.Add(new CameraSelectedItemModel()
                {
                    CameraName = "Camera" + i,
                    IsOpen = false,
                    CameraConfig = new ChannelCameraCfgModel()
                    {
                        Name = "Config" + i
                    }
                });
            }

        }

        private void AddCameraInfoFunc()
        {
            IsEditChannelCameraInfo = Visibility.Visible;
            IsViewChannelList = Visibility.Collapsed;
        }

        private void PreviewCameraFunc()
        {
            try
            {
                if (Camera != null && Cameras.Count > 0)
                {
                    MessageBox.Show(Camera.CameraName);
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
            }
        }

        /// <summary>
        /// 删除当前摄像头 及其通道配置信息
        /// </summary>
        /// <param name="obj"></param>
        private void DeleteCameraFunc(object obj)
        {
            try
            {
                if (Camera != null && Cameras.Count > 0)
                {
                    string cameraName = Camera.CameraName;
                    MessageBox.Show(Camera.CameraName);
                    Cameras.Remove(Camera);

                    RaisePropertyChanged("Cameras");
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
            }
        }
        /// <summary>
        /// 编辑当前摄像头 及其通道配置信息
        /// </summary>
        /// <param name="obj"></param>
        private void EditCameraFunc(object obj)
        {
            try
            {
                if (Camera != null && Cameras.Count > 0)
                {
                    MessageBox.Show(Camera.CameraName);
                }
            }
            catch (Exception ex)
            {

            }
        }

        #region 字段 命令




        private ChannelTreeViewModel channelVModel { get; set; }

        ChannelCameraCfgModel _linkCameraChannel;//连接摄像头所需的参数


        private IList<CameraSelectedItemModel> cameras = new List<CameraSelectedItemModel>();
        private CameraSelectedItemModel camera;

        private bool isSelectedCamera;


        #region 通道分组及摄像头通道

        /// <summary>
        /// 通道组下所有的摄像头列表
        /// </summary>
        public IList<CameraSelectedItemModel> Cameras
        {
            get { return cameras; }
            set { cameras = value; RaisePropertyChanged("Cameras"); }
        }


        /// <summary>
        /// 该通道组下当前选中的摄像头
        /// </summary>
        public CameraSelectedItemModel Camera
        {
            get { return camera; }
            set { camera = value; RaisePropertyChanged("Camera"); }
        }
        #endregion //通道组及通道 


        #region Properties

        /// <summary>
        /// 连接到摄像头所需要的参数
        /// </summary>
        public ChannelCameraCfgModel LinkCameraChannel
        {
            get { return _linkCameraChannel; }
            set { _linkCameraChannel = value; }
        }


        #endregion //Properties

        #endregion //字段 命令






        List<WindowsFormsHost> wFHList = new List<WindowsFormsHost>();
        int currentPlayVideoCount = 0;
        int currentMaxPlayvideoCount = 0;
        private void SelectedCameraFunc(object obj)
        {
            //try
            //{
            //    ChannelListItemViewModel lbi = (obj as ListBox).SelectedItem as ChannelListItemViewModel;
            //    if (lbi == null)
            //    {
            //        return;
            //    }
            //    string ip = lbi.MyChannelCfg.CaptureCfg.TcAddr;
            //    if (ip == string.Empty)
            //    {
            //        System.Windows.MessageBox.Show("摄像机IP为空！");
            //        return;
            //    }
            //    if (lbi.IsOpened == false)
            //    {
            //        lbi.IsOpened = true;
            //        currentPlayVideoCount++;
            //        AxDZVideoControl usercontrol = new AxDZVideoControl();
            //        usercontrol.OpenCamera(lbi.MyChannelCfg.CaptureCfg.NCaptureType, lbi.MyChannelCfg.CaptureCfg.TcAddr + "|" + lbi.MyChannelCfg.TcDescription, (uint)lbi.MyChannelCfg.CaptureCfg.NPort, lbi.MyChannelCfg.CaptureCfg.TcUID, lbi.MyChannelCfg.CaptureCfg.TcPSW, 1, 1);
            //        foreach (WindowsFormsHost wfh in wFHList)
            //        {
            //            if (wfh.Tag == null)
            //            {
            //                wfh.Child = usercontrol;
            //                wfh.Tag = lbi.MyChannelCfg.TcChaneelID;
            //                break;
            //            }
            //        }
            //        if (currentPlayVideoCount > currentMaxPlayvideoCount)
            //        {
            //            SetVideoGridScreen(currentPlayVideoCount);
            //        }

            //        //usercontrol.Update();
            //        // this.UpdateLayout();

            //    }
            //    else
            //    {
            //        currentPlayVideoCount--;
            //        foreach (WindowsFormsHost wfh in wFHList)
            //        {
            //            if (wfh.Tag != null && wfh.Tag.ToString() == lbi.MyChannelCfg.TcChaneelID)
            //            {
            //                (wfh.Child as AxDZVideoControl).CloseCamera();
            //                //wfh.Child = null;
            //                //wfh.Child.Dispose();
            //                wfh.Child = null;
            //                wfh.Tag = null;
            //                break;
            //            }
            //        }
            //        lbi.IsOpened = false;
            //    }
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message);
            //}
        }

        /// <summary>
        /// 设置摄像头显示分屏
        /// </summary>
        /// <param name="currentPlayVideoCount"></param>
        private void SetVideoGridScreen(int currentPlayVideoCount)
        {

        }
    }
}
