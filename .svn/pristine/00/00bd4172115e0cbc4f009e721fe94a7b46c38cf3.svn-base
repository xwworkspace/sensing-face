using FACE_ChannelManagement.Models;
using FACE_ChannelManagement.ViewModels;
using SING.Data.BaseTools;
using SING.Data.Data;
using SING.Data.Logger;
using SING.Data.ScheduleProcess;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Data;
using Thrift.Protocol;
using Thrift.Transport;

namespace FACE_ChannelManagement.Services.ChannelServices
{
    public class InitChannelService
    {
        private ViewModel viewModel;
        private BackgroundWorker Worker;//后台线程  查询并加载通道列表

        private void RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            //viewModel.Progress.IsBusyHanding = false;
        }

        public void DoWork(ViewModel _viewModel)
        {
            try
            {
                this.viewModel = _viewModel;

                //viewModel.Progress = new ProgressSattus();
                //viewModel.Progress.IsBusyHanding = true;

                Worker = new BackgroundWorker();//新的线程  用来异步加载摄像头录像内容
                Worker.WorkerReportsProgress = true;
                Worker.WorkerSupportsCancellation = true;
                Worker.DoWork += Do;
                Worker.RunWorkerCompleted += RunWorkerCompleted;
                Worker.ProgressChanged += ProgressChanged;
                Worker.RunWorkerAsync();
            }
            catch (Exception err)
            {
                Logger.Error("ChannelService:通道启动查询异常", err);
            }
        }
        private void Do(object sender, DoWorkEventArgs e)
        {
            SearchChannel();
        }
        private void ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //viewModel.Progress.ProgressValue = e.ProgressPercentage;
        }

        /// <summary>
        /// 通道查询，并加载通道列表数据
        /// </summary>
        private void SearchChannel()
        {
            try
            {
                List<Models.ChannelConfigData> ChannelList = new List<Models.ChannelConfigData>();//前端视图Model

                List<SING.Data.Data.ChannelCfgData> list = ScheduleGet.QueryAllChannel();//所有通道，及其详细信息

                if (list != null && list.Count > 0)
                {
                    foreach (SING.Data.Data.ChannelCfgData data in list)
                    {
                        Models.ChannelConfigData viewData = new Models.ChannelConfigData();
                        viewData.ChannelCfgData = data;
                        viewData.IsOpened = false;
                        ChannelList.Add(viewData);
                    }
                    viewModel.ChannelList = ChannelList;
                    viewModel.Cameras = new ListCollectionView(viewModel.ChannelList);
                    viewModel.Cameras.CurrentChanged += new EventHandler(viewModel.ChannelListItemChanged);
                }
            }
            catch (Exception err)
            {
                Logger.Error("查询通道异常", err);
            }
        }


        #region 初始化通道参数

        /// <summary>
        /// 查询通道类型
        /// </summary>
        /// <returns></returns>
        public List<string> QueryDefChannelType()
        {
            List<string> listQueryDefChannelType = new List<string>();
            TTransport transport = new TSocket(AppConfig.Instance.IP, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServer.Client _BusinessServerClient = new BusinessServer.Client(protocol);
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                listQueryDefChannelType = _BusinessServerClient.QueryDefChannelType();

                if (transport.IsOpen)
                {
                    transport.Close();
                }
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Info(string.Format("QueryDefChannelType出现异常：【{0}】", ex));
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                return null;
                //MyMessage.showYes("网络异常，稍后重试"); 
            }
            return listQueryDefChannelType;
        }


        /// <summary>
        /// 查询视频源类型
        /// </summary>
        /// <returns></returns>
        public List<string> QueryDefCameraType()
        {
            List<string> listQueryDefCameraType = new List<string>();
            TTransport transport = new TSocket(AppConfig.Instance.IP, AppConfig.Instance.Port);
            TProtocol protocol = new TBinaryProtocol(transport);
            BusinessServer.Client _BusinessServerClient = new BusinessServer.Client(protocol);
            try
            {
                #region
                if (!transport.IsOpen)
                {
                    transport.Open();
                }
                listQueryDefCameraType = _BusinessServerClient.QueryDefCameraType();

                if (transport.IsOpen)
                {
                    transport.Close();
                }
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Info(string.Format("QueryDefCameraType出现异常：【{0}】", ex));
                if (transport.IsOpen)
                {
                    transport.Close();
                }
                return null;
                //MyMessage.showYes("网络异常，稍后重试"); 
            }
            return listQueryDefCameraType;
        }

        #endregion

    }
}
