/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class CapServer {
  public interface Iface {
    int OpenChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_OpenChannel(AsyncCallback callback, object state, string channelID);
    int End_OpenChannel(IAsyncResult asyncResult);
    #endif
    int CloseChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_CloseChannel(AsyncCallback callback, object state, string channelID);
    int End_CloseChannel(IAsyncResult asyncResult);
    #endif
    int OpenAllChannel();
    #if SILVERLIGHT
    IAsyncResult Begin_OpenAllChannel(AsyncCallback callback, object state);
    int End_OpenAllChannel(IAsyncResult asyncResult);
    #endif
    int CloseAllChannel();
    #if SILVERLIGHT
    IAsyncResult Begin_CloseAllChannel(AsyncCallback callback, object state);
    int End_CloseAllChannel(IAsyncResult asyncResult);
    #endif
    int AddChannel(ChannelCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg);
    int End_AddChannel(IAsyncResult asyncResult);
    #endif
    int DelChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_DelChannel(AsyncCallback callback, object state, string channelID);
    int End_DelChannel(IAsyncResult asyncResult);
    #endif
    int ModifyChannel(ChannelCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg);
    int End_ModifyChannel(IAsyncResult asyncResult);
    #endif
    List<ChannelCfg> QueryAllChannel();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryAllChannel(AsyncCallback callback, object state);
    List<ChannelCfg> End_QueryAllChannel(IAsyncResult asyncResult);
    #endif
    ChannelCfg QueryChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryChannel(AsyncCallback callback, object state, string channelID);
    ChannelCfg End_QueryChannel(IAsyncResult asyncResult);
    #endif
    int GetChannelState(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_GetChannelState(AsyncCallback callback, object state, string channelID);
    int End_GetChannelState(IAsyncResult asyncResult);
    #endif
    int GetServerState();
    #if SILVERLIGHT
    IAsyncResult Begin_GetServerState(AsyncCallback callback, object state);
    int End_GetServerState(IAsyncResult asyncResult);
    #endif
    List<ChannelState> GetServerStateWithCh();
    #if SILVERLIGHT
    IAsyncResult Begin_GetServerStateWithCh(AsyncCallback callback, object state);
    List<ChannelState> End_GetServerStateWithCh(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_OpenChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_OpenChannel(callback, state, channelID);
    }

    public int End_OpenChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_OpenChannel();
    }

    #endif

    public int OpenChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_OpenChannel(channelID);
      return recv_OpenChannel();

      #else
      var asyncResult = Begin_OpenChannel(null, null, channelID);
      return End_OpenChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_OpenChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_OpenChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("OpenChannel", TMessageType.Call, seqid_));
      OpenChannel_args args = new OpenChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_OpenChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      OpenChannel_result result = new OpenChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CloseChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_CloseChannel(callback, state, channelID);
    }

    public int End_CloseChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CloseChannel();
    }

    #endif

    public int CloseChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_CloseChannel(channelID);
      return recv_CloseChannel();

      #else
      var asyncResult = Begin_CloseChannel(null, null, channelID);
      return End_CloseChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CloseChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_CloseChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CloseChannel", TMessageType.Call, seqid_));
      CloseChannel_args args = new CloseChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_CloseChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CloseChannel_result result = new CloseChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_OpenAllChannel(AsyncCallback callback, object state)
    {
      return send_OpenAllChannel(callback, state);
    }

    public int End_OpenAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_OpenAllChannel();
    }

    #endif

    public int OpenAllChannel()
    {
      #if !SILVERLIGHT
      send_OpenAllChannel();
      return recv_OpenAllChannel();

      #else
      var asyncResult = Begin_OpenAllChannel(null, null);
      return End_OpenAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_OpenAllChannel(AsyncCallback callback, object state)
    #else
    public void send_OpenAllChannel()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("OpenAllChannel", TMessageType.Call, seqid_));
      OpenAllChannel_args args = new OpenAllChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_OpenAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      OpenAllChannel_result result = new OpenAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CloseAllChannel(AsyncCallback callback, object state)
    {
      return send_CloseAllChannel(callback, state);
    }

    public int End_CloseAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CloseAllChannel();
    }

    #endif

    public int CloseAllChannel()
    {
      #if !SILVERLIGHT
      send_CloseAllChannel();
      return recv_CloseAllChannel();

      #else
      var asyncResult = Begin_CloseAllChannel(null, null);
      return End_CloseAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CloseAllChannel(AsyncCallback callback, object state)
    #else
    public void send_CloseAllChannel()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CloseAllChannel", TMessageType.Call, seqid_));
      CloseAllChannel_args args = new CloseAllChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_CloseAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CloseAllChannel_result result = new CloseAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    {
      return send_AddChannel(callback, state, cfg);
    }

    public int End_AddChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddChannel();
    }

    #endif

    public int AddChannel(ChannelCfg cfg)
    {
      #if !SILVERLIGHT
      send_AddChannel(cfg);
      return recv_AddChannel();

      #else
      var asyncResult = Begin_AddChannel(null, null, cfg);
      return End_AddChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    #else
    public void send_AddChannel(ChannelCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddChannel", TMessageType.Call, seqid_));
      AddChannel_args args = new AddChannel_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddChannel_result result = new AddChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_DelChannel(callback, state, channelID);
    }

    public int End_DelChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelChannel();
    }

    #endif

    public int DelChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_DelChannel(channelID);
      return recv_DelChannel();

      #else
      var asyncResult = Begin_DelChannel(null, null, channelID);
      return End_DelChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_DelChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelChannel", TMessageType.Call, seqid_));
      DelChannel_args args = new DelChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelChannel_result result = new DelChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    {
      return send_ModifyChannel(callback, state, cfg);
    }

    public int End_ModifyChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModifyChannel();
    }

    #endif

    public int ModifyChannel(ChannelCfg cfg)
    {
      #if !SILVERLIGHT
      send_ModifyChannel(cfg);
      return recv_ModifyChannel();

      #else
      var asyncResult = Begin_ModifyChannel(null, null, cfg);
      return End_ModifyChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    #else
    public void send_ModifyChannel(ChannelCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModifyChannel", TMessageType.Call, seqid_));
      ModifyChannel_args args = new ModifyChannel_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModifyChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModifyChannel_result result = new ModifyChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModifyChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryAllChannel(AsyncCallback callback, object state)
    {
      return send_QueryAllChannel(callback, state);
    }

    public List<ChannelCfg> End_QueryAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryAllChannel();
    }

    #endif

    public List<ChannelCfg> QueryAllChannel()
    {
      #if !SILVERLIGHT
      send_QueryAllChannel();
      return recv_QueryAllChannel();

      #else
      var asyncResult = Begin_QueryAllChannel(null, null);
      return End_QueryAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryAllChannel(AsyncCallback callback, object state)
    #else
    public void send_QueryAllChannel()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryAllChannel", TMessageType.Call, seqid_));
      QueryAllChannel_args args = new QueryAllChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelCfg> recv_QueryAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryAllChannel_result result = new QueryAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_QueryChannel(callback, state, channelID);
    }

    public ChannelCfg End_QueryChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryChannel();
    }

    #endif

    public ChannelCfg QueryChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_QueryChannel(channelID);
      return recv_QueryChannel();

      #else
      var asyncResult = Begin_QueryChannel(null, null, channelID);
      return End_QueryChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_QueryChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryChannel", TMessageType.Call, seqid_));
      QueryChannel_args args = new QueryChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelCfg recv_QueryChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryChannel_result result = new QueryChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetChannelState(AsyncCallback callback, object state, string channelID)
    {
      return send_GetChannelState(callback, state, channelID);
    }

    public int End_GetChannelState(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetChannelState();
    }

    #endif

    public int GetChannelState(string channelID)
    {
      #if !SILVERLIGHT
      send_GetChannelState(channelID);
      return recv_GetChannelState();

      #else
      var asyncResult = Begin_GetChannelState(null, null, channelID);
      return End_GetChannelState(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetChannelState(AsyncCallback callback, object state, string channelID)
    #else
    public void send_GetChannelState(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetChannelState", TMessageType.Call, seqid_));
      GetChannelState_args args = new GetChannelState_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_GetChannelState()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetChannelState_result result = new GetChannelState_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChannelState failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetServerState(AsyncCallback callback, object state)
    {
      return send_GetServerState(callback, state);
    }

    public int End_GetServerState(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetServerState();
    }

    #endif

    public int GetServerState()
    {
      #if !SILVERLIGHT
      send_GetServerState();
      return recv_GetServerState();

      #else
      var asyncResult = Begin_GetServerState(null, null);
      return End_GetServerState(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetServerState(AsyncCallback callback, object state)
    #else
    public void send_GetServerState()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetServerState", TMessageType.Call, seqid_));
      GetServerState_args args = new GetServerState_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_GetServerState()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetServerState_result result = new GetServerState_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServerState failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetServerStateWithCh(AsyncCallback callback, object state)
    {
      return send_GetServerStateWithCh(callback, state);
    }

    public List<ChannelState> End_GetServerStateWithCh(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetServerStateWithCh();
    }

    #endif

    public List<ChannelState> GetServerStateWithCh()
    {
      #if !SILVERLIGHT
      send_GetServerStateWithCh();
      return recv_GetServerStateWithCh();

      #else
      var asyncResult = Begin_GetServerStateWithCh(null, null);
      return End_GetServerStateWithCh(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetServerStateWithCh(AsyncCallback callback, object state)
    #else
    public void send_GetServerStateWithCh()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetServerStateWithCh", TMessageType.Call, seqid_));
      GetServerStateWithCh_args args = new GetServerStateWithCh_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelState> recv_GetServerStateWithCh()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetServerStateWithCh_result result = new GetServerStateWithCh_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServerStateWithCh failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["OpenChannel"] = OpenChannel_Process;
      processMap_["CloseChannel"] = CloseChannel_Process;
      processMap_["OpenAllChannel"] = OpenAllChannel_Process;
      processMap_["CloseAllChannel"] = CloseAllChannel_Process;
      processMap_["AddChannel"] = AddChannel_Process;
      processMap_["DelChannel"] = DelChannel_Process;
      processMap_["ModifyChannel"] = ModifyChannel_Process;
      processMap_["QueryAllChannel"] = QueryAllChannel_Process;
      processMap_["QueryChannel"] = QueryChannel_Process;
      processMap_["GetChannelState"] = GetChannelState_Process;
      processMap_["GetServerState"] = GetServerState_Process;
      processMap_["GetServerStateWithCh"] = GetServerStateWithCh_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void OpenChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      OpenChannel_args args = new OpenChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      OpenChannel_result result = new OpenChannel_result();
      result.Success = iface_.OpenChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("OpenChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CloseChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CloseChannel_args args = new CloseChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CloseChannel_result result = new CloseChannel_result();
      result.Success = iface_.CloseChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("CloseChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void OpenAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      OpenAllChannel_args args = new OpenAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      OpenAllChannel_result result = new OpenAllChannel_result();
      result.Success = iface_.OpenAllChannel();
      oprot.WriteMessageBegin(new TMessage("OpenAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CloseAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CloseAllChannel_args args = new CloseAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CloseAllChannel_result result = new CloseAllChannel_result();
      result.Success = iface_.CloseAllChannel();
      oprot.WriteMessageBegin(new TMessage("CloseAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddChannel_args args = new AddChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddChannel_result result = new AddChannel_result();
      result.Success = iface_.AddChannel(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelChannel_args args = new DelChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelChannel_result result = new DelChannel_result();
      result.Success = iface_.DelChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("DelChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModifyChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModifyChannel_args args = new ModifyChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModifyChannel_result result = new ModifyChannel_result();
      result.Success = iface_.ModifyChannel(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModifyChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryAllChannel_args args = new QueryAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryAllChannel_result result = new QueryAllChannel_result();
      result.Success = iface_.QueryAllChannel();
      oprot.WriteMessageBegin(new TMessage("QueryAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryChannel_args args = new QueryChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryChannel_result result = new QueryChannel_result();
      result.Success = iface_.QueryChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("QueryChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetChannelState_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetChannelState_args args = new GetChannelState_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetChannelState_result result = new GetChannelState_result();
      result.Success = iface_.GetChannelState(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("GetChannelState", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetServerState_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetServerState_args args = new GetServerState_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetServerState_result result = new GetServerState_result();
      result.Success = iface_.GetServerState();
      oprot.WriteMessageBegin(new TMessage("GetServerState", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetServerStateWithCh_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetServerStateWithCh_args args = new GetServerStateWithCh_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetServerStateWithCh_result result = new GetServerStateWithCh_result();
      result.Success = iface_.GetServerStateWithCh();
      oprot.WriteMessageBegin(new TMessage("GetServerStateWithCh", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public OpenChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public OpenChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public CloseChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CloseChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenAllChannel_args : TBase
  {

    public OpenAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenAllChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenAllChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenAllChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public OpenAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenAllChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseAllChannel_args : TBase
  {

    public CloseAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseAllChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseAllChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseAllChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CloseAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseAllChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannel_args : TBase
  {
    private ChannelCfg _cfg;

    public ChannelCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannel_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public DelChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannel_args : TBase
  {
    private ChannelCfg _cfg;

    public ChannelCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModifyChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannel_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModifyChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannel_args : TBase
  {

    public QueryAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannel_result : TBase
  {
    private List<ChannelCfg> _success;

    public List<ChannelCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelCfg>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    ChannelCfg _elem14;
                    _elem14 = new ChannelCfg();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelCfg _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public QueryChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannel_result : TBase
  {
    private ChannelCfg _success;

    public ChannelCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetChannelState_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public GetChannelState_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetChannelState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetChannelState_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetChannelState_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetChannelState_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetChannelState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetChannelState_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetServerState_args : TBase
  {

    public GetServerState_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetServerState_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetServerState_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetServerState_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetServerState_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetServerState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetServerState_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetServerStateWithCh_args : TBase
  {

    public GetServerStateWithCh_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetServerStateWithCh_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetServerStateWithCh_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetServerStateWithCh_result : TBase
  {
    private List<ChannelState> _success;

    public List<ChannelState> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetServerStateWithCh_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelState>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    ChannelState _elem18;
                    _elem18 = new ChannelState();
                    _elem18.Read(iprot);
                    Success.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetServerStateWithCh_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelState _iter19 in Success)
              {
                _iter19.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetServerStateWithCh_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
