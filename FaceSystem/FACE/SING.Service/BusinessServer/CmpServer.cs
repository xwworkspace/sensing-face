/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class CmpServer {
  public interface Iface {
    List<CmpResult> Compare(byte[] Feature, int nThreshold, int nMaxCount);
    #if SILVERLIGHT
    IAsyncResult Begin_Compare(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount);
    List<CmpResult> End_Compare(IAsyncResult asyncResult);
    #endif
    List<CmpResult> Compare2(byte[] Feature, int nThreshold, int nMaxCount, int type, int sst);
    #if SILVERLIGHT
    IAsyncResult Begin_Compare2(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount, int type, int sst);
    List<CmpResult> End_Compare2(IAsyncResult asyncResult);
    #endif
    int CompareTwoFea(byte[] Feature1, byte[] Feature2);
    #if SILVERLIGHT
    IAsyncResult Begin_CompareTwoFea(AsyncCallback callback, object state, byte[] Feature1, byte[] Feature2);
    int End_CompareTwoFea(IAsyncResult asyncResult);
    #endif
    int AddFaceObj(CmpServerFaceObj obj);
    #if SILVERLIGHT
    IAsyncResult Begin_AddFaceObj(AsyncCallback callback, object state, CmpServerFaceObj obj);
    int End_AddFaceObj(IAsyncResult asyncResult);
    #endif
    int AddFaceTemplate(FaceTemplateEx obj);
    #if SILVERLIGHT
    IAsyncResult Begin_AddFaceTemplate(AsyncCallback callback, object state, FaceTemplateEx obj);
    int End_AddFaceTemplate(IAsyncResult asyncResult);
    #endif
    int DelFaceObj(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_DelFaceObj(AsyncCallback callback, object state, string id);
    int End_DelFaceObj(IAsyncResult asyncResult);
    #endif
    int DelFaceTemplate(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_DelFaceTemplate(AsyncCallback callback, object state, string id);
    int End_DelFaceTemplate(IAsyncResult asyncResult);
    #endif
    List<FaceInfo> DetectImg(byte[] img);
    #if SILVERLIGHT
    IAsyncResult Begin_DetectImg(AsyncCallback callback, object state, byte[] img);
    List<FaceInfo> End_DetectImg(IAsyncResult asyncResult);
    #endif
    List<FaceInfo> DetectRGB24(byte[] img, int width, int height);
    #if SILVERLIGHT
    IAsyncResult Begin_DetectRGB24(AsyncCallback callback, object state, byte[] img, int width, int height);
    List<FaceInfo> End_DetectRGB24(IAsyncResult asyncResult);
    #endif
    CResultCfg CmpVisitor(byte[] IdImg, byte[] Img);
    #if SILVERLIGHT
    IAsyncResult Begin_CmpVisitor(AsyncCallback callback, object state, byte[] IdImg, byte[] Img);
    CResultCfg End_CmpVisitor(IAsyncResult asyncResult);
    #endif
    List<CompareImgResult> VisitorVerifiCmp(List<byte[]> Img);
    #if SILVERLIGHT
    IAsyncResult Begin_VisitorVerifiCmp(AsyncCallback callback, object state, List<byte[]> Img);
    List<CompareImgResult> End_VisitorVerifiCmp(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_Compare(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount)
    {
      return send_Compare(callback, state, Feature, nThreshold, nMaxCount);
    }

    public List<CmpResult> End_Compare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Compare();
    }

    #endif

    public List<CmpResult> Compare(byte[] Feature, int nThreshold, int nMaxCount)
    {
      #if !SILVERLIGHT
      send_Compare(Feature, nThreshold, nMaxCount);
      return recv_Compare();

      #else
      var asyncResult = Begin_Compare(null, null, Feature, nThreshold, nMaxCount);
      return End_Compare(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Compare(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount)
    #else
    public void send_Compare(byte[] Feature, int nThreshold, int nMaxCount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Compare", TMessageType.Call, seqid_));
      Compare_args args = new Compare_args();
      args.Feature = Feature;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpResult> recv_Compare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Compare_result result = new Compare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Compare failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_Compare2(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    {
      return send_Compare2(callback, state, Feature, nThreshold, nMaxCount, type, sst);
    }

    public List<CmpResult> End_Compare2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Compare2();
    }

    #endif

    public List<CmpResult> Compare2(byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    {
      #if !SILVERLIGHT
      send_Compare2(Feature, nThreshold, nMaxCount, type, sst);
      return recv_Compare2();

      #else
      var asyncResult = Begin_Compare2(null, null, Feature, nThreshold, nMaxCount, type, sst);
      return End_Compare2(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Compare2(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    #else
    public void send_Compare2(byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Compare2", TMessageType.Call, seqid_));
      Compare2_args args = new Compare2_args();
      args.Feature = Feature;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Type = type;
      args.Sst = sst;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpResult> recv_Compare2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Compare2_result result = new Compare2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Compare2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CompareTwoFea(AsyncCallback callback, object state, byte[] Feature1, byte[] Feature2)
    {
      return send_CompareTwoFea(callback, state, Feature1, Feature2);
    }

    public int End_CompareTwoFea(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CompareTwoFea();
    }

    #endif

    public int CompareTwoFea(byte[] Feature1, byte[] Feature2)
    {
      #if !SILVERLIGHT
      send_CompareTwoFea(Feature1, Feature2);
      return recv_CompareTwoFea();

      #else
      var asyncResult = Begin_CompareTwoFea(null, null, Feature1, Feature2);
      return End_CompareTwoFea(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CompareTwoFea(AsyncCallback callback, object state, byte[] Feature1, byte[] Feature2)
    #else
    public void send_CompareTwoFea(byte[] Feature1, byte[] Feature2)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CompareTwoFea", TMessageType.Call, seqid_));
      CompareTwoFea_args args = new CompareTwoFea_args();
      args.Feature1 = Feature1;
      args.Feature2 = Feature2;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_CompareTwoFea()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CompareTwoFea_result result = new CompareTwoFea_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CompareTwoFea failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddFaceObj(AsyncCallback callback, object state, CmpServerFaceObj obj)
    {
      return send_AddFaceObj(callback, state, obj);
    }

    public int End_AddFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddFaceObj();
    }

    #endif

    public int AddFaceObj(CmpServerFaceObj obj)
    {
      #if !SILVERLIGHT
      send_AddFaceObj(obj);
      return recv_AddFaceObj();

      #else
      var asyncResult = Begin_AddFaceObj(null, null, obj);
      return End_AddFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddFaceObj(AsyncCallback callback, object state, CmpServerFaceObj obj)
    #else
    public void send_AddFaceObj(CmpServerFaceObj obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddFaceObj", TMessageType.Call, seqid_));
      AddFaceObj_args args = new AddFaceObj_args();
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddFaceObj_result result = new AddFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddFaceTemplate(AsyncCallback callback, object state, FaceTemplateEx obj)
    {
      return send_AddFaceTemplate(callback, state, obj);
    }

    public int End_AddFaceTemplate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddFaceTemplate();
    }

    #endif

    public int AddFaceTemplate(FaceTemplateEx obj)
    {
      #if !SILVERLIGHT
      send_AddFaceTemplate(obj);
      return recv_AddFaceTemplate();

      #else
      var asyncResult = Begin_AddFaceTemplate(null, null, obj);
      return End_AddFaceTemplate(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddFaceTemplate(AsyncCallback callback, object state, FaceTemplateEx obj)
    #else
    public void send_AddFaceTemplate(FaceTemplateEx obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddFaceTemplate", TMessageType.Call, seqid_));
      AddFaceTemplate_args args = new AddFaceTemplate_args();
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddFaceTemplate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddFaceTemplate_result result = new AddFaceTemplate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFaceTemplate failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelFaceObj(AsyncCallback callback, object state, string id)
    {
      return send_DelFaceObj(callback, state, id);
    }

    public int End_DelFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelFaceObj();
    }

    #endif

    public int DelFaceObj(string id)
    {
      #if !SILVERLIGHT
      send_DelFaceObj(id);
      return recv_DelFaceObj();

      #else
      var asyncResult = Begin_DelFaceObj(null, null, id);
      return End_DelFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelFaceObj(AsyncCallback callback, object state, string id)
    #else
    public void send_DelFaceObj(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelFaceObj", TMessageType.Call, seqid_));
      DelFaceObj_args args = new DelFaceObj_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelFaceObj_result result = new DelFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelFaceTemplate(AsyncCallback callback, object state, string id)
    {
      return send_DelFaceTemplate(callback, state, id);
    }

    public int End_DelFaceTemplate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelFaceTemplate();
    }

    #endif

    public int DelFaceTemplate(string id)
    {
      #if !SILVERLIGHT
      send_DelFaceTemplate(id);
      return recv_DelFaceTemplate();

      #else
      var asyncResult = Begin_DelFaceTemplate(null, null, id);
      return End_DelFaceTemplate(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelFaceTemplate(AsyncCallback callback, object state, string id)
    #else
    public void send_DelFaceTemplate(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelFaceTemplate", TMessageType.Call, seqid_));
      DelFaceTemplate_args args = new DelFaceTemplate_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelFaceTemplate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelFaceTemplate_result result = new DelFaceTemplate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFaceTemplate failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DetectImg(AsyncCallback callback, object state, byte[] img)
    {
      return send_DetectImg(callback, state, img);
    }

    public List<FaceInfo> End_DetectImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DetectImg();
    }

    #endif

    public List<FaceInfo> DetectImg(byte[] img)
    {
      #if !SILVERLIGHT
      send_DetectImg(img);
      return recv_DetectImg();

      #else
      var asyncResult = Begin_DetectImg(null, null, img);
      return End_DetectImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DetectImg(AsyncCallback callback, object state, byte[] img)
    #else
    public void send_DetectImg(byte[] img)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DetectImg", TMessageType.Call, seqid_));
      DetectImg_args args = new DetectImg_args();
      args.Img = img;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceInfo> recv_DetectImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DetectImg_result result = new DetectImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DetectImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DetectRGB24(AsyncCallback callback, object state, byte[] img, int width, int height)
    {
      return send_DetectRGB24(callback, state, img, width, height);
    }

    public List<FaceInfo> End_DetectRGB24(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DetectRGB24();
    }

    #endif

    public List<FaceInfo> DetectRGB24(byte[] img, int width, int height)
    {
      #if !SILVERLIGHT
      send_DetectRGB24(img, width, height);
      return recv_DetectRGB24();

      #else
      var asyncResult = Begin_DetectRGB24(null, null, img, width, height);
      return End_DetectRGB24(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DetectRGB24(AsyncCallback callback, object state, byte[] img, int width, int height)
    #else
    public void send_DetectRGB24(byte[] img, int width, int height)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DetectRGB24", TMessageType.Call, seqid_));
      DetectRGB24_args args = new DetectRGB24_args();
      args.Img = img;
      args.Width = width;
      args.Height = height;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceInfo> recv_DetectRGB24()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DetectRGB24_result result = new DetectRGB24_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DetectRGB24 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CmpVisitor(AsyncCallback callback, object state, byte[] IdImg, byte[] Img)
    {
      return send_CmpVisitor(callback, state, IdImg, Img);
    }

    public CResultCfg End_CmpVisitor(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CmpVisitor();
    }

    #endif

    public CResultCfg CmpVisitor(byte[] IdImg, byte[] Img)
    {
      #if !SILVERLIGHT
      send_CmpVisitor(IdImg, Img);
      return recv_CmpVisitor();

      #else
      var asyncResult = Begin_CmpVisitor(null, null, IdImg, Img);
      return End_CmpVisitor(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CmpVisitor(AsyncCallback callback, object state, byte[] IdImg, byte[] Img)
    #else
    public void send_CmpVisitor(byte[] IdImg, byte[] Img)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CmpVisitor", TMessageType.Call, seqid_));
      CmpVisitor_args args = new CmpVisitor_args();
      args.IdImg = IdImg;
      args.Img = Img;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public CResultCfg recv_CmpVisitor()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CmpVisitor_result result = new CmpVisitor_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CmpVisitor failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_VisitorVerifiCmp(AsyncCallback callback, object state, List<byte[]> Img)
    {
      return send_VisitorVerifiCmp(callback, state, Img);
    }

    public List<CompareImgResult> End_VisitorVerifiCmp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_VisitorVerifiCmp();
    }

    #endif

    public List<CompareImgResult> VisitorVerifiCmp(List<byte[]> Img)
    {
      #if !SILVERLIGHT
      send_VisitorVerifiCmp(Img);
      return recv_VisitorVerifiCmp();

      #else
      var asyncResult = Begin_VisitorVerifiCmp(null, null, Img);
      return End_VisitorVerifiCmp(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_VisitorVerifiCmp(AsyncCallback callback, object state, List<byte[]> Img)
    #else
    public void send_VisitorVerifiCmp(List<byte[]> Img)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("VisitorVerifiCmp", TMessageType.Call, seqid_));
      VisitorVerifiCmp_args args = new VisitorVerifiCmp_args();
      args.Img = Img;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CompareImgResult> recv_VisitorVerifiCmp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      VisitorVerifiCmp_result result = new VisitorVerifiCmp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VisitorVerifiCmp failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["Compare"] = Compare_Process;
      processMap_["Compare2"] = Compare2_Process;
      processMap_["CompareTwoFea"] = CompareTwoFea_Process;
      processMap_["AddFaceObj"] = AddFaceObj_Process;
      processMap_["AddFaceTemplate"] = AddFaceTemplate_Process;
      processMap_["DelFaceObj"] = DelFaceObj_Process;
      processMap_["DelFaceTemplate"] = DelFaceTemplate_Process;
      processMap_["DetectImg"] = DetectImg_Process;
      processMap_["DetectRGB24"] = DetectRGB24_Process;
      processMap_["CmpVisitor"] = CmpVisitor_Process;
      processMap_["VisitorVerifiCmp"] = VisitorVerifiCmp_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void Compare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Compare_args args = new Compare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Compare_result result = new Compare_result();
      result.Success = iface_.Compare(args.Feature, args.NThreshold, args.NMaxCount);
      oprot.WriteMessageBegin(new TMessage("Compare", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Compare2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Compare2_args args = new Compare2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Compare2_result result = new Compare2_result();
      result.Success = iface_.Compare2(args.Feature, args.NThreshold, args.NMaxCount, args.Type, args.Sst);
      oprot.WriteMessageBegin(new TMessage("Compare2", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CompareTwoFea_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CompareTwoFea_args args = new CompareTwoFea_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CompareTwoFea_result result = new CompareTwoFea_result();
      result.Success = iface_.CompareTwoFea(args.Feature1, args.Feature2);
      oprot.WriteMessageBegin(new TMessage("CompareTwoFea", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddFaceObj_args args = new AddFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddFaceObj_result result = new AddFaceObj_result();
      result.Success = iface_.AddFaceObj(args.Obj);
      oprot.WriteMessageBegin(new TMessage("AddFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddFaceTemplate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddFaceTemplate_args args = new AddFaceTemplate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddFaceTemplate_result result = new AddFaceTemplate_result();
      result.Success = iface_.AddFaceTemplate(args.Obj);
      oprot.WriteMessageBegin(new TMessage("AddFaceTemplate", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelFaceObj_args args = new DelFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelFaceObj_result result = new DelFaceObj_result();
      result.Success = iface_.DelFaceObj(args.Id);
      oprot.WriteMessageBegin(new TMessage("DelFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelFaceTemplate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelFaceTemplate_args args = new DelFaceTemplate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelFaceTemplate_result result = new DelFaceTemplate_result();
      result.Success = iface_.DelFaceTemplate(args.Id);
      oprot.WriteMessageBegin(new TMessage("DelFaceTemplate", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DetectImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DetectImg_args args = new DetectImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DetectImg_result result = new DetectImg_result();
      result.Success = iface_.DetectImg(args.Img);
      oprot.WriteMessageBegin(new TMessage("DetectImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DetectRGB24_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DetectRGB24_args args = new DetectRGB24_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DetectRGB24_result result = new DetectRGB24_result();
      result.Success = iface_.DetectRGB24(args.Img, args.Width, args.Height);
      oprot.WriteMessageBegin(new TMessage("DetectRGB24", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CmpVisitor_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CmpVisitor_args args = new CmpVisitor_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CmpVisitor_result result = new CmpVisitor_result();
      result.Success = iface_.CmpVisitor(args.IdImg, args.Img);
      oprot.WriteMessageBegin(new TMessage("CmpVisitor", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void VisitorVerifiCmp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      VisitorVerifiCmp_args args = new VisitorVerifiCmp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      VisitorVerifiCmp_result result = new VisitorVerifiCmp_result();
      result.Success = iface_.VisitorVerifiCmp(args.Img);
      oprot.WriteMessageBegin(new TMessage("VisitorVerifiCmp", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Compare_args : TBase
  {
    private byte[] _Feature;
    private int _nThreshold;
    private int _nMaxCount;

    public byte[] Feature
    {
      get
      {
        return _Feature;
      }
      set
      {
        __isset.Feature = true;
        this._Feature = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Feature;
      public bool nThreshold;
      public bool nMaxCount;
    }

    public Compare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Compare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null && __isset.Feature) {
          field.Name = "Feature";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Compare_args(");
      bool __first = true;
      if (Feature != null && __isset.Feature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Compare_result : TBase
  {
    private List<CmpResult> _success;

    public List<CmpResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Compare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpResult>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    CmpResult _elem22;
                    _elem22 = new CmpResult();
                    _elem22.Read(iprot);
                    Success.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Compare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpResult _iter23 in Success)
              {
                _iter23.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Compare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Compare2_args : TBase
  {
    private byte[] _Feature;
    private int _nThreshold;
    private int _nMaxCount;
    private int _type;
    private int _sst;

    public byte[] Feature
    {
      get
      {
        return _Feature;
      }
      set
      {
        __isset.Feature = true;
        this._Feature = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Sst
    {
      get
      {
        return _sst;
      }
      set
      {
        __isset.sst = true;
        this._sst = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Feature;
      public bool nThreshold;
      public bool nMaxCount;
      public bool type;
      public bool sst;
    }

    public Compare2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Sst = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Compare2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null && __isset.Feature) {
          field.Name = "Feature";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.sst) {
          field.Name = "sst";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Sst);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Compare2_args(");
      bool __first = true;
      if (Feature != null && __isset.Feature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.sst) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sst: ");
        __sb.Append(Sst);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Compare2_result : TBase
  {
    private List<CmpResult> _success;

    public List<CmpResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Compare2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpResult>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    CmpResult _elem26;
                    _elem26 = new CmpResult();
                    _elem26.Read(iprot);
                    Success.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Compare2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpResult _iter27 in Success)
              {
                _iter27.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Compare2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareTwoFea_args : TBase
  {
    private byte[] _Feature1;
    private byte[] _Feature2;

    public byte[] Feature1
    {
      get
      {
        return _Feature1;
      }
      set
      {
        __isset.Feature1 = true;
        this._Feature1 = value;
      }
    }

    public byte[] Feature2
    {
      get
      {
        return _Feature2;
      }
      set
      {
        __isset.Feature2 = true;
        this._Feature2 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Feature1;
      public bool Feature2;
    }

    public CompareTwoFea_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature1 = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Feature2 = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareTwoFea_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature1 != null && __isset.Feature1) {
          field.Name = "Feature1";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature1);
          oprot.WriteFieldEnd();
        }
        if (Feature2 != null && __isset.Feature2) {
          field.Name = "Feature2";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature2);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareTwoFea_args(");
      bool __first = true;
      if (Feature1 != null && __isset.Feature1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature1: ");
        __sb.Append(Feature1);
      }
      if (Feature2 != null && __isset.Feature2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature2: ");
        __sb.Append(Feature2);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareTwoFea_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CompareTwoFea_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareTwoFea_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareTwoFea_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObj_args : TBase
  {
    private CmpServerFaceObj _obj;

    public CmpServerFaceObj Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool obj;
    }

    public AddFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Obj = new CmpServerFaceObj();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObj_args(");
      bool __first = true;
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObj_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObj_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceTemplate_args : TBase
  {
    private FaceTemplateEx _obj;

    public FaceTemplateEx Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool obj;
    }

    public AddFaceTemplate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Obj = new FaceTemplateEx();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceTemplate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceTemplate_args(");
      bool __first = true;
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceTemplate_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddFaceTemplate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceTemplate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceTemplate_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObj_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public DelFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObj_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObj_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObj_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceTemplate_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public DelFaceTemplate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceTemplate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceTemplate_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceTemplate_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelFaceTemplate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceTemplate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceTemplate_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DetectImg_args : TBase
  {
    private byte[] _img;

    public byte[] Img
    {
      get
      {
        return _img;
      }
      set
      {
        __isset.img = true;
        this._img = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool img;
    }

    public DetectImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Img = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DetectImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Img != null && __isset.img) {
          field.Name = "img";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Img);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DetectImg_args(");
      bool __first = true;
      if (Img != null && __isset.img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DetectImg_result : TBase
  {
    private List<FaceInfo> _success;

    public List<FaceInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DetectImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceInfo>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    FaceInfo _elem30;
                    _elem30 = new FaceInfo();
                    _elem30.Read(iprot);
                    Success.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DetectImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceInfo _iter31 in Success)
              {
                _iter31.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DetectImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DetectRGB24_args : TBase
  {
    private byte[] _img;
    private int _width;
    private int _height;

    public byte[] Img
    {
      get
      {
        return _img;
      }
      set
      {
        __isset.img = true;
        this._img = value;
      }
    }

    public int Width
    {
      get
      {
        return _width;
      }
      set
      {
        __isset.width = true;
        this._width = value;
      }
    }

    public int Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool img;
      public bool width;
      public bool height;
    }

    public DetectRGB24_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Img = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Width = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Height = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DetectRGB24_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Img != null && __isset.img) {
          field.Name = "img";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Img);
          oprot.WriteFieldEnd();
        }
        if (__isset.width) {
          field.Name = "width";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Width);
          oprot.WriteFieldEnd();
        }
        if (__isset.height) {
          field.Name = "height";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Height);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DetectRGB24_args(");
      bool __first = true;
      if (Img != null && __isset.img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      if (__isset.width) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Width: ");
        __sb.Append(Width);
      }
      if (__isset.height) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Height: ");
        __sb.Append(Height);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DetectRGB24_result : TBase
  {
    private List<FaceInfo> _success;

    public List<FaceInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DetectRGB24_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceInfo>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    FaceInfo _elem34;
                    _elem34 = new FaceInfo();
                    _elem34.Read(iprot);
                    Success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DetectRGB24_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceInfo _iter35 in Success)
              {
                _iter35.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DetectRGB24_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CmpVisitor_args : TBase
  {
    private byte[] _IdImg;
    private byte[] _Img;

    public byte[] IdImg
    {
      get
      {
        return _IdImg;
      }
      set
      {
        __isset.IdImg = true;
        this._IdImg = value;
      }
    }

    public byte[] Img
    {
      get
      {
        return _Img;
      }
      set
      {
        __isset.Img = true;
        this._Img = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool IdImg;
      public bool Img;
    }

    public CmpVisitor_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IdImg = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Img = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CmpVisitor_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdImg != null && __isset.IdImg) {
          field.Name = "IdImg";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(IdImg);
          oprot.WriteFieldEnd();
        }
        if (Img != null && __isset.Img) {
          field.Name = "Img";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Img);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CmpVisitor_args(");
      bool __first = true;
      if (IdImg != null && __isset.IdImg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdImg: ");
        __sb.Append(IdImg);
      }
      if (Img != null && __isset.Img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CmpVisitor_result : TBase
  {
    private CResultCfg _success;

    public CResultCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CmpVisitor_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CResultCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CmpVisitor_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CmpVisitor_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifiCmp_args : TBase
  {
    private List<byte[]> _Img;

    public List<byte[]> Img
    {
      get
      {
        return _Img;
      }
      set
      {
        __isset.Img = true;
        this._Img = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Img;
    }

    public VisitorVerifiCmp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Img = new List<byte[]>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    byte[] _elem38;
                    _elem38 = iprot.ReadBinary();
                    Img.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifiCmp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Img != null && __isset.Img) {
          field.Name = "Img";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Img.Count));
            foreach (byte[] _iter39 in Img)
            {
              oprot.WriteBinary(_iter39);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifiCmp_args(");
      bool __first = true;
      if (Img != null && __isset.Img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifiCmp_result : TBase
  {
    private List<CompareImgResult> _success;

    public List<CompareImgResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public VisitorVerifiCmp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompareImgResult>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    CompareImgResult _elem42;
                    _elem42 = new CompareImgResult();
                    _elem42.Read(iprot);
                    Success.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifiCmp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompareImgResult _iter43 in Success)
              {
                _iter43.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifiCmp_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
