/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ClientCfg : TBase
{
  private string _client_IP;
  private string _client_Port;
  private int _client_op;
  private string _cam_IP;
  private int _cam_Port;
  private string _channel_addr;
  private int _channel_port;

  public string Client_IP
  {
    get
    {
      return _client_IP;
    }
    set
    {
      __isset.client_IP = true;
      this._client_IP = value;
    }
  }

  public string Client_Port
  {
    get
    {
      return _client_Port;
    }
    set
    {
      __isset.client_Port = true;
      this._client_Port = value;
    }
  }

  public int Client_op
  {
    get
    {
      return _client_op;
    }
    set
    {
      __isset.client_op = true;
      this._client_op = value;
    }
  }

  public string Cam_IP
  {
    get
    {
      return _cam_IP;
    }
    set
    {
      __isset.cam_IP = true;
      this._cam_IP = value;
    }
  }

  public int Cam_Port
  {
    get
    {
      return _cam_Port;
    }
    set
    {
      __isset.cam_Port = true;
      this._cam_Port = value;
    }
  }

  public string Channel_addr
  {
    get
    {
      return _channel_addr;
    }
    set
    {
      __isset.channel_addr = true;
      this._channel_addr = value;
    }
  }

  public int Channel_port
  {
    get
    {
      return _channel_port;
    }
    set
    {
      __isset.channel_port = true;
      this._channel_port = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool client_IP;
    public bool client_Port;
    public bool client_op;
    public bool cam_IP;
    public bool cam_Port;
    public bool channel_addr;
    public bool channel_port;
  }

  public ClientCfg() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Client_IP = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Client_Port = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Client_op = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Cam_IP = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Cam_Port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Channel_addr = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Channel_port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ClientCfg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Client_IP != null && __isset.client_IP) {
        field.Name = "client_IP";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Client_IP);
        oprot.WriteFieldEnd();
      }
      if (Client_Port != null && __isset.client_Port) {
        field.Name = "client_Port";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Client_Port);
        oprot.WriteFieldEnd();
      }
      if (__isset.client_op) {
        field.Name = "client_op";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Client_op);
        oprot.WriteFieldEnd();
      }
      if (Cam_IP != null && __isset.cam_IP) {
        field.Name = "cam_IP";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cam_IP);
        oprot.WriteFieldEnd();
      }
      if (__isset.cam_Port) {
        field.Name = "cam_Port";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cam_Port);
        oprot.WriteFieldEnd();
      }
      if (Channel_addr != null && __isset.channel_addr) {
        field.Name = "channel_addr";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Channel_addr);
        oprot.WriteFieldEnd();
      }
      if (__isset.channel_port) {
        field.Name = "channel_port";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Channel_port);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ClientCfg(");
    bool __first = true;
    if (Client_IP != null && __isset.client_IP) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Client_IP: ");
      __sb.Append(Client_IP);
    }
    if (Client_Port != null && __isset.client_Port) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Client_Port: ");
      __sb.Append(Client_Port);
    }
    if (__isset.client_op) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Client_op: ");
      __sb.Append(Client_op);
    }
    if (Cam_IP != null && __isset.cam_IP) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Cam_IP: ");
      __sb.Append(Cam_IP);
    }
    if (__isset.cam_Port) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Cam_Port: ");
      __sb.Append(Cam_Port);
    }
    if (Channel_addr != null && __isset.channel_addr) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Channel_addr: ");
      __sb.Append(Channel_addr);
    }
    if (__isset.channel_port) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Channel_port: ");
      __sb.Append(Channel_port);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

