/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class FaceInfo : TBase
{
  private _RECT _rcFace;
  private _POINT _ptLeftEye;
  private _POINT _ptRightEye;
  private _POINT _ptMouth;
  private _POINT _ptNose;
  private int _nYaw;
  private int _nPitch;
  private int _nRoll;
  private int _nQuality;
  private int _nGender;
  private int _nAge;
  private long _dTm;
  private string _tcSdkVer;
  private byte[] _Fea;
  private byte[] _Img;
  private string _channelID;

  public _RECT RcFace
  {
    get
    {
      return _rcFace;
    }
    set
    {
      __isset.rcFace = true;
      this._rcFace = value;
    }
  }

  public _POINT PtLeftEye
  {
    get
    {
      return _ptLeftEye;
    }
    set
    {
      __isset.ptLeftEye = true;
      this._ptLeftEye = value;
    }
  }

  public _POINT PtRightEye
  {
    get
    {
      return _ptRightEye;
    }
    set
    {
      __isset.ptRightEye = true;
      this._ptRightEye = value;
    }
  }

  public _POINT PtMouth
  {
    get
    {
      return _ptMouth;
    }
    set
    {
      __isset.ptMouth = true;
      this._ptMouth = value;
    }
  }

  public _POINT PtNose
  {
    get
    {
      return _ptNose;
    }
    set
    {
      __isset.ptNose = true;
      this._ptNose = value;
    }
  }

  public int NYaw
  {
    get
    {
      return _nYaw;
    }
    set
    {
      __isset.nYaw = true;
      this._nYaw = value;
    }
  }

  public int NPitch
  {
    get
    {
      return _nPitch;
    }
    set
    {
      __isset.nPitch = true;
      this._nPitch = value;
    }
  }

  public int NRoll
  {
    get
    {
      return _nRoll;
    }
    set
    {
      __isset.nRoll = true;
      this._nRoll = value;
    }
  }

  public int NQuality
  {
    get
    {
      return _nQuality;
    }
    set
    {
      __isset.nQuality = true;
      this._nQuality = value;
    }
  }

  public int NGender
  {
    get
    {
      return _nGender;
    }
    set
    {
      __isset.nGender = true;
      this._nGender = value;
    }
  }

  public int NAge
  {
    get
    {
      return _nAge;
    }
    set
    {
      __isset.nAge = true;
      this._nAge = value;
    }
  }

  public long DTm
  {
    get
    {
      return _dTm;
    }
    set
    {
      __isset.dTm = true;
      this._dTm = value;
    }
  }

  public string TcSdkVer
  {
    get
    {
      return _tcSdkVer;
    }
    set
    {
      __isset.tcSdkVer = true;
      this._tcSdkVer = value;
    }
  }

  public byte[] Fea
  {
    get
    {
      return _Fea;
    }
    set
    {
      __isset.Fea = true;
      this._Fea = value;
    }
  }

  public byte[] Img
  {
    get
    {
      return _Img;
    }
    set
    {
      __isset.Img = true;
      this._Img = value;
    }
  }

  public string ChannelID
  {
    get
    {
      return _channelID;
    }
    set
    {
      __isset.channelID = true;
      this._channelID = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool rcFace;
    public bool ptLeftEye;
    public bool ptRightEye;
    public bool ptMouth;
    public bool ptNose;
    public bool nYaw;
    public bool nPitch;
    public bool nRoll;
    public bool nQuality;
    public bool nGender;
    public bool nAge;
    public bool dTm;
    public bool tcSdkVer;
    public bool Fea;
    public bool Img;
    public bool channelID;
  }

  public FaceInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              RcFace = new _RECT();
              RcFace.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              PtLeftEye = new _POINT();
              PtLeftEye.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              PtRightEye = new _POINT();
              PtRightEye.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              PtMouth = new _POINT();
              PtMouth.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              PtNose = new _POINT();
              PtNose.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              NYaw = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              NPitch = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              NRoll = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              NQuality = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              NGender = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              NAge = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              DTm = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              TcSdkVer = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Fea = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Img = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              ChannelID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("FaceInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RcFace != null && __isset.rcFace) {
        field.Name = "rcFace";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        RcFace.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PtLeftEye != null && __isset.ptLeftEye) {
        field.Name = "ptLeftEye";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        PtLeftEye.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PtRightEye != null && __isset.ptRightEye) {
        field.Name = "ptRightEye";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        PtRightEye.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PtMouth != null && __isset.ptMouth) {
        field.Name = "ptMouth";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        PtMouth.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PtNose != null && __isset.ptNose) {
        field.Name = "ptNose";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        PtNose.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.nYaw) {
        field.Name = "nYaw";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NYaw);
        oprot.WriteFieldEnd();
      }
      if (__isset.nPitch) {
        field.Name = "nPitch";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NPitch);
        oprot.WriteFieldEnd();
      }
      if (__isset.nRoll) {
        field.Name = "nRoll";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NRoll);
        oprot.WriteFieldEnd();
      }
      if (__isset.nQuality) {
        field.Name = "nQuality";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NQuality);
        oprot.WriteFieldEnd();
      }
      if (__isset.nGender) {
        field.Name = "nGender";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NGender);
        oprot.WriteFieldEnd();
      }
      if (__isset.nAge) {
        field.Name = "nAge";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NAge);
        oprot.WriteFieldEnd();
      }
      if (__isset.dTm) {
        field.Name = "dTm";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DTm);
        oprot.WriteFieldEnd();
      }
      if (TcSdkVer != null && __isset.tcSdkVer) {
        field.Name = "tcSdkVer";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcSdkVer);
        oprot.WriteFieldEnd();
      }
      if (Fea != null && __isset.Fea) {
        field.Name = "Fea";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Fea);
        oprot.WriteFieldEnd();
      }
      if (Img != null && __isset.Img) {
        field.Name = "Img";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Img);
        oprot.WriteFieldEnd();
      }
      if (ChannelID != null && __isset.channelID) {
        field.Name = "channelID";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelID);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("FaceInfo(");
    bool __first = true;
    if (RcFace != null && __isset.rcFace) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RcFace: ");
      __sb.Append(RcFace== null ? "<null>" : RcFace.ToString());
    }
    if (PtLeftEye != null && __isset.ptLeftEye) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PtLeftEye: ");
      __sb.Append(PtLeftEye== null ? "<null>" : PtLeftEye.ToString());
    }
    if (PtRightEye != null && __isset.ptRightEye) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PtRightEye: ");
      __sb.Append(PtRightEye== null ? "<null>" : PtRightEye.ToString());
    }
    if (PtMouth != null && __isset.ptMouth) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PtMouth: ");
      __sb.Append(PtMouth== null ? "<null>" : PtMouth.ToString());
    }
    if (PtNose != null && __isset.ptNose) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PtNose: ");
      __sb.Append(PtNose== null ? "<null>" : PtNose.ToString());
    }
    if (__isset.nYaw) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NYaw: ");
      __sb.Append(NYaw);
    }
    if (__isset.nPitch) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NPitch: ");
      __sb.Append(NPitch);
    }
    if (__isset.nRoll) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NRoll: ");
      __sb.Append(NRoll);
    }
    if (__isset.nQuality) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NQuality: ");
      __sb.Append(NQuality);
    }
    if (__isset.nGender) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NGender: ");
      __sb.Append(NGender);
    }
    if (__isset.nAge) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NAge: ");
      __sb.Append(NAge);
    }
    if (__isset.dTm) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DTm: ");
      __sb.Append(DTm);
    }
    if (TcSdkVer != null && __isset.tcSdkVer) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TcSdkVer: ");
      __sb.Append(TcSdkVer);
    }
    if (Fea != null && __isset.Fea) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Fea: ");
      __sb.Append(Fea);
    }
    if (Img != null && __isset.Img) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Img: ");
      __sb.Append(Img);
    }
    if (ChannelID != null && __isset.channelID) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelID: ");
      __sb.Append(ChannelID);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

