/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class VisitorInfo : TBase
{
  private string _idnumber;
  private string _name;
  private int _nGender;
  private int _nAge;
  private long _dTm;
  private string _channelID;
  private byte[] _IdImg;
  private byte[] _Img;

  public string Idnumber
  {
    get
    {
      return _idnumber;
    }
    set
    {
      __isset.idnumber = true;
      this._idnumber = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public int NGender
  {
    get
    {
      return _nGender;
    }
    set
    {
      __isset.nGender = true;
      this._nGender = value;
    }
  }

  public int NAge
  {
    get
    {
      return _nAge;
    }
    set
    {
      __isset.nAge = true;
      this._nAge = value;
    }
  }

  public long DTm
  {
    get
    {
      return _dTm;
    }
    set
    {
      __isset.dTm = true;
      this._dTm = value;
    }
  }

  public string ChannelID
  {
    get
    {
      return _channelID;
    }
    set
    {
      __isset.channelID = true;
      this._channelID = value;
    }
  }

  public byte[] IdImg
  {
    get
    {
      return _IdImg;
    }
    set
    {
      __isset.IdImg = true;
      this._IdImg = value;
    }
  }

  public byte[] Img
  {
    get
    {
      return _Img;
    }
    set
    {
      __isset.Img = true;
      this._Img = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool idnumber;
    public bool name;
    public bool nGender;
    public bool nAge;
    public bool dTm;
    public bool channelID;
    public bool IdImg;
    public bool Img;
  }

  public VisitorInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Idnumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              NGender = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NAge = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              DTm = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              ChannelID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              IdImg = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Img = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("VisitorInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Idnumber != null && __isset.idnumber) {
        field.Name = "idnumber";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Idnumber);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.nGender) {
        field.Name = "nGender";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NGender);
        oprot.WriteFieldEnd();
      }
      if (__isset.nAge) {
        field.Name = "nAge";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NAge);
        oprot.WriteFieldEnd();
      }
      if (__isset.dTm) {
        field.Name = "dTm";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DTm);
        oprot.WriteFieldEnd();
      }
      if (ChannelID != null && __isset.channelID) {
        field.Name = "channelID";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelID);
        oprot.WriteFieldEnd();
      }
      if (IdImg != null && __isset.IdImg) {
        field.Name = "IdImg";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(IdImg);
        oprot.WriteFieldEnd();
      }
      if (Img != null && __isset.Img) {
        field.Name = "Img";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Img);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("VisitorInfo(");
    bool __first = true;
    if (Idnumber != null && __isset.idnumber) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Idnumber: ");
      __sb.Append(Idnumber);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (__isset.nGender) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NGender: ");
      __sb.Append(NGender);
    }
    if (__isset.nAge) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NAge: ");
      __sb.Append(NAge);
    }
    if (__isset.dTm) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DTm: ");
      __sb.Append(DTm);
    }
    if (ChannelID != null && __isset.channelID) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelID: ");
      __sb.Append(ChannelID);
    }
    if (IdImg != null && __isset.IdImg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IdImg: ");
      __sb.Append(IdImg);
    }
    if (Img != null && __isset.Img) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Img: ");
      __sb.Append(Img);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

