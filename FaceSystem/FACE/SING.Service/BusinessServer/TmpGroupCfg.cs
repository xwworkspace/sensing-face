/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TmpGroupCfg : TBase
{
  private string _tmpgid;
  private string _uid;
  private string _tmpgname;
  private string _rtype;
  private List<ResourceCfg> _rescfg;
  private string _pid;

  public string Tmpgid
  {
    get
    {
      return _tmpgid;
    }
    set
    {
      __isset.tmpgid = true;
      this._tmpgid = value;
    }
  }

  public string Uid
  {
    get
    {
      return _uid;
    }
    set
    {
      __isset.uid = true;
      this._uid = value;
    }
  }

  public string Tmpgname
  {
    get
    {
      return _tmpgname;
    }
    set
    {
      __isset.tmpgname = true;
      this._tmpgname = value;
    }
  }

  public string Rtype
  {
    get
    {
      return _rtype;
    }
    set
    {
      __isset.rtype = true;
      this._rtype = value;
    }
  }

  public List<ResourceCfg> Rescfg
  {
    get
    {
      return _rescfg;
    }
    set
    {
      __isset.rescfg = true;
      this._rescfg = value;
    }
  }

  public string Pid
  {
    get
    {
      return _pid;
    }
    set
    {
      __isset.pid = true;
      this._pid = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool tmpgid;
    public bool uid;
    public bool tmpgname;
    public bool rtype;
    public bool rescfg;
    public bool pid;
  }

  public TmpGroupCfg() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Tmpgid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Uid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Tmpgname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Rtype = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Rescfg = new List<ResourceCfg>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  ResourceCfg _elem6;
                  _elem6 = new ResourceCfg();
                  _elem6.Read(iprot);
                  Rescfg.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Pid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TmpGroupCfg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Tmpgid != null && __isset.tmpgid) {
        field.Name = "tmpgid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Tmpgid);
        oprot.WriteFieldEnd();
      }
      if (Uid != null && __isset.uid) {
        field.Name = "uid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Uid);
        oprot.WriteFieldEnd();
      }
      if (Tmpgname != null && __isset.tmpgname) {
        field.Name = "tmpgname";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Tmpgname);
        oprot.WriteFieldEnd();
      }
      if (Rtype != null && __isset.rtype) {
        field.Name = "rtype";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Rtype);
        oprot.WriteFieldEnd();
      }
      if (Rescfg != null && __isset.rescfg) {
        field.Name = "rescfg";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Rescfg.Count));
          foreach (ResourceCfg _iter7 in Rescfg)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Pid != null && __isset.pid) {
        field.Name = "pid";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Pid);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TmpGroupCfg(");
    bool __first = true;
    if (Tmpgid != null && __isset.tmpgid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Tmpgid: ");
      __sb.Append(Tmpgid);
    }
    if (Uid != null && __isset.uid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Uid: ");
      __sb.Append(Uid);
    }
    if (Tmpgname != null && __isset.tmpgname) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Tmpgname: ");
      __sb.Append(Tmpgname);
    }
    if (Rtype != null && __isset.rtype) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Rtype: ");
      __sb.Append(Rtype);
    }
    if (Rescfg != null && __isset.rescfg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Rescfg: ");
      __sb.Append(Rescfg);
    }
    if (Pid != null && __isset.pid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Pid: ");
      __sb.Append(Pid);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

