/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SCountInfo : TBase
{
  private int _count;
  private List<SCountInfoOneDay> _dayarr;

  public int Count
  {
    get
    {
      return _count;
    }
    set
    {
      __isset.count = true;
      this._count = value;
    }
  }

  public List<SCountInfoOneDay> Dayarr
  {
    get
    {
      return _dayarr;
    }
    set
    {
      __isset.dayarr = true;
      this._dayarr = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool count;
    public bool dayarr;
  }

  public SCountInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Dayarr = new List<SCountInfoOneDay>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  SCountInfoOneDay _elem10;
                  _elem10 = new SCountInfoOneDay();
                  _elem10.Read(iprot);
                  Dayarr.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SCountInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.count) {
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
      }
      if (Dayarr != null && __isset.dayarr) {
        field.Name = "dayarr";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Dayarr.Count));
          foreach (SCountInfoOneDay _iter11 in Dayarr)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SCountInfo(");
    bool __first = true;
    if (__isset.count) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Count: ");
      __sb.Append(Count);
    }
    if (Dayarr != null && __isset.dayarr) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Dayarr: ");
      __sb.Append(Dayarr);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

