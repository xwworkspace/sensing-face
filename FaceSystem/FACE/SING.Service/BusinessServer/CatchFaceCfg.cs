/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CatchFaceCfg : TBase
{
  private int _nMinFace;
  private int _nMinQuality;
  private int _nMinCapDistance;
  private int _nMaxFaceSaveDistance;
  private int _nYaw;
  private int _nPitch;
  private int _nYoll;
  private int _nReserved;
  private string _tcSdkVer;

  public int NMinFace
  {
    get
    {
      return _nMinFace;
    }
    set
    {
      __isset.nMinFace = true;
      this._nMinFace = value;
    }
  }

  public int NMinQuality
  {
    get
    {
      return _nMinQuality;
    }
    set
    {
      __isset.nMinQuality = true;
      this._nMinQuality = value;
    }
  }

  public int NMinCapDistance
  {
    get
    {
      return _nMinCapDistance;
    }
    set
    {
      __isset.nMinCapDistance = true;
      this._nMinCapDistance = value;
    }
  }

  public int NMaxFaceSaveDistance
  {
    get
    {
      return _nMaxFaceSaveDistance;
    }
    set
    {
      __isset.nMaxFaceSaveDistance = true;
      this._nMaxFaceSaveDistance = value;
    }
  }

  public int NYaw
  {
    get
    {
      return _nYaw;
    }
    set
    {
      __isset.nYaw = true;
      this._nYaw = value;
    }
  }

  public int NPitch
  {
    get
    {
      return _nPitch;
    }
    set
    {
      __isset.nPitch = true;
      this._nPitch = value;
    }
  }

  public int NYoll
  {
    get
    {
      return _nYoll;
    }
    set
    {
      __isset.nYoll = true;
      this._nYoll = value;
    }
  }

  public int NReserved
  {
    get
    {
      return _nReserved;
    }
    set
    {
      __isset.nReserved = true;
      this._nReserved = value;
    }
  }

  public string TcSdkVer
  {
    get
    {
      return _tcSdkVer;
    }
    set
    {
      __isset.tcSdkVer = true;
      this._tcSdkVer = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool nMinFace;
    public bool nMinQuality;
    public bool nMinCapDistance;
    public bool nMaxFaceSaveDistance;
    public bool nYaw;
    public bool nPitch;
    public bool nYoll;
    public bool nReserved;
    public bool tcSdkVer;
  }

  public CatchFaceCfg() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              NMinFace = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              NMinQuality = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              NMinCapDistance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NMaxFaceSaveDistance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              NYaw = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              NPitch = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              NYoll = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              NReserved = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              TcSdkVer = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CatchFaceCfg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.nMinFace) {
        field.Name = "nMinFace";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NMinFace);
        oprot.WriteFieldEnd();
      }
      if (__isset.nMinQuality) {
        field.Name = "nMinQuality";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NMinQuality);
        oprot.WriteFieldEnd();
      }
      if (__isset.nMinCapDistance) {
        field.Name = "nMinCapDistance";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NMinCapDistance);
        oprot.WriteFieldEnd();
      }
      if (__isset.nMaxFaceSaveDistance) {
        field.Name = "nMaxFaceSaveDistance";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NMaxFaceSaveDistance);
        oprot.WriteFieldEnd();
      }
      if (__isset.nYaw) {
        field.Name = "nYaw";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NYaw);
        oprot.WriteFieldEnd();
      }
      if (__isset.nPitch) {
        field.Name = "nPitch";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NPitch);
        oprot.WriteFieldEnd();
      }
      if (__isset.nYoll) {
        field.Name = "nYoll";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NYoll);
        oprot.WriteFieldEnd();
      }
      if (__isset.nReserved) {
        field.Name = "nReserved";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NReserved);
        oprot.WriteFieldEnd();
      }
      if (TcSdkVer != null && __isset.tcSdkVer) {
        field.Name = "tcSdkVer";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcSdkVer);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CatchFaceCfg(");
    bool __first = true;
    if (__isset.nMinFace) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NMinFace: ");
      __sb.Append(NMinFace);
    }
    if (__isset.nMinQuality) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NMinQuality: ");
      __sb.Append(NMinQuality);
    }
    if (__isset.nMinCapDistance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NMinCapDistance: ");
      __sb.Append(NMinCapDistance);
    }
    if (__isset.nMaxFaceSaveDistance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NMaxFaceSaveDistance: ");
      __sb.Append(NMaxFaceSaveDistance);
    }
    if (__isset.nYaw) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NYaw: ");
      __sb.Append(NYaw);
    }
    if (__isset.nPitch) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NPitch: ");
      __sb.Append(NPitch);
    }
    if (__isset.nYoll) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NYoll: ");
      __sb.Append(NYoll);
    }
    if (__isset.nReserved) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NReserved: ");
      __sb.Append(NReserved);
    }
    if (TcSdkVer != null && __isset.tcSdkVer) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TcSdkVer: ");
      __sb.Append(TcSdkVer);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

